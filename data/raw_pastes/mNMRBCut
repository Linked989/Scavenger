#include <iostream>
#include <array>
#include <cstdio>
#define task "S4"
using namespace std;
using ll = long long;
using ld = long double;

const int N = 5e2 + 2;
int n, k, m, s;
int a[15];

/// Idea: Thực hiện giống như bignum (Tức là chữ số hàng đơn vị ở vị trí 0 thay vì ở vị trí m)

void Read(){
	cin >> k >> n;
	--n;
}
/// Chuyển từ k sang array (Giống to_string)
void convert(int k){
	while(k){
		a[m++] = k % 10;
		k /= 10;
	}
}
/// Tính tổng các chữ số của 1 số (Hàm này bổ trợ cho hàm count4)
int sum(int k){
	int ans = 0;
	while(k){
		ans += k % 10;
		k /= 10;
	}
	return ans;
}
/// Tính tổng các chữ số của 4 * (số trong dãy)
int count4(){
	int carry = 0, ans = 0;
	for(int i = 0; i < m; ++i){
		ans += (a[i] * 4 + carry) % 10;
		carry = (a[i] * 4 + carry) / 10;
	}
	return ans + sum(carry);
}
/// Tính tổng các chữ số của số trong dãy
int countall(){
	int ans = 0;
	for(int i = 0; i < m; ++i)
		ans += a[i];
	return ans;
}
/// Tăng ông thứ i lên 1 => Phép cộng có nhớ
void increase(int i){
	int carry = 1;
	while(carry){
		m = max(m, i + 1);
		int ans = a[i] + carry;
		a[i] = ans % 10;
		carry = ans / 10;
		++i;
	}
}

void Solve(){
	convert(k); // Chuyển số thứ nhất thành array
	while(n--){
		s = count4(); // Tổng 4 lần số hiện tại
		increase(0); // Số thứ i + 1 > số thứ i, nên tăng lên 1 ở vị trí 0
		int c; // Biến lưu tổng các csố
		while((c = countall()) && c != s){
			/// Hai TH : c < s và c > s
			if(c < s){
				int i = 0;
				int res = 0;
				/// Ta chuyển đến bao giờ tổng >= s thì thôi
				while(res + c < s){
					m = max(m, i + 1);
					res += 9 - a[i];
					++i;
				}
				--i;
				/// Thay đổi lại giá trị biến cho đúng với biến đổi trên
				for(int j = 1; j < i; ++j)
					a[j] = 9;
				a[i] = s - (res - 9 + a[i]) - c + a[i];
			}
			else{
				int i = 0;
				/// Khi nào mà c > s, ta tiếp tục giảm chữ số hàng đang xét xuống 0
				while(c > s){
					c -= a[i] - 1;
					a[i] = 0;
					int carry = 1;
					++i;
					/// Đoạn này là phép cộng có nhớ thôi, k có gì đáng bân tâm
					while(carry){
						int res = a[i] + carry;
						if(res == 10)
							c -= res;
						a[i] = res % 10;
						carry = res / 10;
						++i;
					}
					--i;
					/// Giả sử cần thêm số ta phải tăng m
					m = max(m, i + 1);
				}

			}
		}
	}
	/// In ra các chữ số trong dãy
	while(m--){
		cout << a[m];
	}
}

main(){
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0); if(fopen(task".INP", "r"))
	freopen(task".INP", "r", stdin),
	freopen(task".OUT", "w", stdout);
	Read();
	Solve();
}