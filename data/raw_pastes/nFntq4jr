#include <bits/stdc++.h> 
using namespace std; 
#define INF 0x3f3f3f3f 
  
// iPair ==> Integer Pair 
typedef pair<int, int> iPair; 
  
// To add an edge 
void addEdge(vector <pair<int, int> > adj[], int u, 
                                     int v, int wt) 
{ 
    adj[u].push_back(make_pair(v, wt)); 
    adj[v].push_back(make_pair(u, wt)); 
} 
   
  
// Prints shortest paths from src to all other vertices 
void shortestPath(vector<pair<int,int> > adj[], int V, int src, map <int,int*> *themap) 
{ 
    // Create a priority queue to store vertices that 
    // are being preprocessed. This is weird syntax in C++. 
    // Refer below link for details of this syntax 
    // http://geeksquiz.com/implement-min-heap-using-stl/ 
    priority_queue< iPair, vector <iPair> , greater<iPair> > pq; 
  
    // Create a vector for distances and initialize all 
    // distances as infinite (INF) 
    int *dist = (int*) malloc(V * sizeof(int));
    memset(dist, INF, V * sizeof(int));
  
    // Insert source itself in priority queue and initialize 
    // its distance as 0. 
    pq.push(make_pair(0, src)); 
    dist[src] = 0; 
  
    /* Looping till priority queue becomes empty (or all 
    distances are not finalized) */
    while (!pq.empty()) 
    { 
        // The first vertex in pair is the minimum distance 
        // vertex, extract it from priority queue. 
        // vertex label is stored in second of pair (it 
        // has to be done this way to keep the vertices 
        // sorted distance (distance must be first item 
        // in pair) 
        int u = pq.top().second; 
        pq.pop(); 
  
        // Get all adjacent of u.  
        for (auto x : adj[u]) 
        { 
            // Get vertex label and weight of current adjacent 
            // of u. 
            int v = x.first; 
            int weight = x.second; 
  
            // If there is shorted path to v through u. 
            if (dist[v] > dist[u] + weight) 
            { 
                // Updating distance of v 
                dist[v] = dist[u] + weight; 
                pq.push(make_pair(dist[v], v)); 
            } 
        } 
    } 
    (*themap)[src] = dist;
} 

void fastscan(int &number) 
{ 
    //variable to indicate sign of input number 
    bool negative = false; 
    register int c; 
  
    number = 0; 
  
    // extract current character from buffer 
    c = getchar(); 
    if (c=='-') 
    { 
        // number is negative 
        negative = true; 
  
        // extract the next character from the buffer 
        c = getchar(); 
    } 
  
    // Keep on extracting characters if they are integers 
    // i.e ASCII Value lies from '0'(48) to '9' (57) 
    for (; (c>47 && c<58); c=getchar()) 
        number = number *10 + c - 48; 
  
    // if scanned input has a negative sign, negate the 
    // value of the input number 
    if (negative) 
        number *= -1; 
}

int main()
{
    ios::sync_with_stdio(false);
    int testcase;
    int from, to, weight;
    fastscan(testcase);
    map <int,int*> myMap;
    vector <iPair> adj[testcase+1];
    for(int i=0;i<testcase;i++)
    {
        fastscan(from);
        fastscan(to);
        fastscan(weight);
        addEdge(adj,from,to,weight);
    }
    int *temp;
    myMap.insert({0,temp});
    shortestPath(adj,testcase+1,0,&myMap);

    int testcase1;
    fastscan(testcase1);
    int source = 0;
    int command, destination;
    for(int i=0;i<testcase1;i++)
    {
        fastscan(command);
        fastscan(destination);
        if(command == 1)
        {
            if(myMap[source][destination] == INF)
                cout << "#dirumahaja" << "\n";
            else
                cout << myMap[source][destination] << "\n";
        }
        else
        {
            if(myMap.count(destination) == 0)
            {
                myMap.insert({destination,temp});
                shortestPath(adj,testcase+1,destination,&myMap);
            }
            source = destination;
            cout << "Siap " << destination << "\n";
        }
    }
    return 0;
}