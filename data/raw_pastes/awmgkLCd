#ifndef LIST_NODE_H
#define LIST_NODE_H

// Минимальная единица структуры листа. Ну нода суть нода, ты сам знаешь.
// Тут ничего особенного и не происходит, просто ссылки вперед-назад и значение.
// Ну и всякие сеттеры и геттеры к этому, куда без них.
template<typename T>
class ListNode
{
private:
    ListNode *prev;
    ListNode *next;
    // Единственная вещь, стоящая упоминания - храним значения, а не поинтеры.
    // Я пытался выебнуться и хранить поинтеры, но обосрался на интах. Так сойдет.
    T value;

public:
    ListNode(T val)
        : value(val)
    {
        prev = nullptr;
        next = nullptr;
    }

    ListNode *getPrev() const { return prev; }
    ListNode *getNext() const { return next; }
    T getValue() const { return value; }

    void setPrev(ListNode *node) { prev = node; }
    void setNext(ListNode *node) { next = node; }
    void setValue(T val) { value = val; }
};

#endif // LIST_NODE_H