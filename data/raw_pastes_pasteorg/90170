b' <!DOCTYPE html> <html lang="en"> <head> <meta charset="utf-8"> <meta http-equiv="X-UA-Compatible" content="IE=edge"> <meta name="viewport" content="width=device-width, initial-scale=1">  <meta name="description" content="www.paste.org - allows users to paste snippets of text, usually samples of source code, for public viewing."> <meta name="author" content="An Australian"> <link rel="icon" href="/favicon.ico"> <title>Paste code - paste.org</title>  <link href="/assets/themes/bleh/css/github-highlight.css" rel="stylesheet"> <script src="/assets/themes/bleh/js/highlight.pack.js"></script> <script>hljs.initHighlightingOnLoad();</script> </head> <body> <p><pre><code class="java">import java.util.Vector;\nimport javax.microedition.lcdui.Alert;\nimport javax.microedition.lcdui.AlertType;\nimport javax.microedition.lcdui.Choice;\nimport javax.microedition.lcdui.ChoiceGroup;\nimport javax.microedition.lcdui.Command;\nimport javax.microedition.lcdui.CommandListener;\nimport javax.microedition.lcdui.Display;\nimport javax.microedition.lcdui.Displayable;\nimport javax.microedition.lcdui.Form;\nimport javax.microedition.lcdui.Item;\nimport javax.microedition.lcdui.ItemCommandListener;\nimport javax.microedition.lcdui.ItemStateListener;\nimport javax.microedition.lcdui.TextField;\nimport javax.microedition.midlet.MIDlet;\nimport javax.microedition.rms.RecordComparator;\nimport javax.microedition.rms.RecordEnumeration;\nimport javax.microedition.rms.RecordFilter;\nimport javax.microedition.rms.RecordStore;\nimport javax.microedition.rms.RecordStoreException;\nimport javax.microedition.rms.RecordStoreNotOpenException;\n\n/**\n * @author Anuja\n */\npublic class SearchContact extends MIDlet implements CommandListener, RecordComparator, ItemStateListener, RecordFilter, ItemCommandListener {\n\n    private Display display;\n    private ChoiceGroup searchChoice;\n    private Form searchForm;\n    private TextField searchTxtField;\n    private Command exitCmd;\n    private Command addContactCmd;\n    private Form addContactForm;\n    private TextField nameTxtField;\n    private TextField numberTxtField;\n    private Command backCmd;\n    private Command saveCmd;\n    private String nameStr;\n    private String numberStr;\n    private Alert addAlert;\n    private RecordStore openRecStore;\n    private Vector vectorArray;\n\n    // Need to declare &amp; initialize when we use this with startsWith()\n    // If we don\'t initialize, it will give us NullPointerException\n    // Default value of String is null although other data types have some values like int have 0 as default value\n    private String filterStr = &quot;&quot;;\n\n    private Form changeContactForm;\n    private Command viewCmd;\n    private TextField changeNameTxtField;\n    private TextField changeNumberTxtField;\n    private Command changeBackCmd;\n    private Command changeUpdateCmd;\n    private Command changeDelCmd;\n    private Alert warningAlert;\n\n    public void startApp() {\n        display = Display.getDisplay(this);\n\n        // --------------------- Search Contact Form ---------------------------\n\n        searchForm = new Form(&quot;Search Contact&quot;);\n        searchTxtField = new TextField(&quot;Search Here&quot;, &quot;&quot;, 30, TextField.ANY);\n        searchForm.append(searchTxtField);\n\n        searchChoice = new ChoiceGroup(&quot;&quot;, Choice.EXCLUSIVE);\n        //searchChoice.append(&quot;Anuja&quot;, null);\n        searchForm.append(searchChoice);\n\n        exitCmd = new Command(&quot;Exit&quot;, Command.EXIT, 7);\n        searchForm.addCommand(exitCmd);\n        addContactCmd = new Command(&quot;Add&quot;, Command.OK, 4);\n        searchForm.addCommand(addContactCmd);\n\n        viewCmd = new Command(&quot;View&quot;, Command.OK, 4);\n        searchChoice.addCommand(viewCmd);\n\n        // When we add a command to an Item we have to call setItemCommandListener()\n        // To call this method we need to implements ItemCommandListener interface\n        searchChoice.setItemCommandListener(this);\n\n        // If there is a change of the items here it will call the itemStateChanged()\n        searchForm.setItemStateListener(this);\n\n        searchForm.setCommandListener(this);\n        display.setCurrent(searchForm);\n\n        //-------------------- Add Contact Form --------------------------------\n\n        addContactForm = new Form(&quot;Add Contacts&quot;);\n        nameTxtField = new TextField(&quot;Name&quot;, &quot;&quot;, 80, TextField.ANY);\n        addContactForm.append(nameTxtField);\n        numberTxtField = new TextField(&quot;Number&quot;, &quot;&quot;, 20, TextField.PHONENUMBER);\n        addContactForm.append(numberTxtField);\n\n        backCmd = new Command(&quot;Back&quot;, Command.BACK, 2);\n        addContactForm.addCommand(backCmd);\n        saveCmd = new Command(&quot;Save&quot;, Command.OK, 4);\n        addContactForm.addCommand(saveCmd);\n\n        addContactForm.setCommandListener(this);\n\n        //----------------------- Change Contact Form ----------------------------\n\n        changeContactForm = new Form(&quot;Change Contact&quot;);\n        changeNameTxtField = new TextField(&quot;&quot;, &quot;&quot;, 80, TextField.ANY);\n        changeContactForm.append(changeNameTxtField);\n        changeNumberTxtField = new TextField(&quot;&quot;, &quot;&quot;, 20, TextField.PHONENUMBER);\n        changeContactForm.append(changeNumberTxtField);\n\n        changeBackCmd = new Command(&quot;Back&quot;, Command.BACK, 2);\n        changeContactForm.addCommand(changeBackCmd);\n        changeUpdateCmd = new Command(&quot;Update&quot;, Command.OK, 4);\n        changeContactForm.addCommand(changeUpdateCmd);\n        changeDelCmd = new Command(&quot;Delete&quot;, Command.OK, 4);\n        changeContactForm.addCommand(changeDelCmd);\n\n        changeContactForm.setCommandListener(this);\n\n        //-------------------- Open a RecordStore ------------------------------\n\n        try {\n            openRecStore = RecordStore.openRecordStore(&quot;Contacts&quot;, true);\n        } catch (RecordStoreException ex) {\n            ex.printStackTrace();\n        }\n\n        loadContacts();\n    }\n\n    public void pauseApp() {\n    }\n\n    public void destroyApp(boolean unconditional) {\n    }\n\n    public void commandAction(Command c, Displayable d) {\n        if (c == exitCmd) {\n            notifyDestroyed();\n        } else if (c == addContactCmd) {\n            nameTxtField.setString(&quot;&quot;);\n            numberTxtField.setString(&quot;&quot;);\n            display.setCurrent(addContactForm);\n        } else if (c == backCmd) {\n            searchTxtField.setString(&quot;&quot;);\n            display.setCurrent(searchForm);\n        } else if (c == saveCmd) {\n\n            //------------------ Get the inputs ------------------------\n            nameStr = nameTxtField.getString();\n            numberStr = numberTxtField.getString();\n            String fullDetails = nameStr + &quot;*&quot; + numberStr;\n            //System.out.println(fullDetails);\n\n            // Can add the name to the ChoiceGroup like below or by getting it from the RecordStore like in loadContacts()\n            //searchChoice.append(nameStr, null);\n\n            addAlert = new Alert&amp;#40;&quot;Added to the Contacts&quot;&amp;#41;;\n            loadContacts();\n            display.setCurrent(addAlert, searchForm);\n\n            searchTxtField.setString(&quot;&quot;);\n\n//--- To add to the RecordStore we need to convert the String to byte array ---\n            byte[] byteArray = fullDetails.getBytes(); // String class\n\n//--- Add a new record to the RecordStore\n            try {\n                openRecStore.addRecord(byteArray, 0, fullDetails.length()); // RecordStore class\n            } catch (RecordStoreException ex) {\n                ex.printStackTrace();\n            }\n\n            // If you remove the following line, the newly adding contacts are not display. They will display after another contact being added\n            loadContacts();\n        }else if(c == changeBackCmd){\n            loadContacts();\n            display.setCurrent(searchForm);\n        }else if(c == changeUpdateCmd){\n            // Get selected index from the ChoiceGroup\n            int getSelInd = searchChoice.getSelectedIndex();\n\n            // Get the relevant element from Vector array according to the selected element from ChoiceGroup\n            ContactDetails getConInfo = (ContactDetails) vectorArray.elementAt(getSelInd);\n\n            // Get the record ID of the selected option\n            int recordId = getConInfo.getContactId();\n\n            String changeName = changeNameTxtField.getString();\n            String changeNumber = changeNumberTxtField.getString();\n\n            String changeFullDetails = changeName + &quot;*&quot; + changeNumber;\n            byte[] editRec = changeFullDetails.getBytes();\n\n            try {\n                // To edit a record we use setRecord()\n                openRecStore.setRecord(recordId, editRec, 0, editRec.length);\n            } catch (RecordStoreException ex) {\n                ex.printStackTrace();\n            }\n\n            loadContacts();\n            warningAlert = new Alert&amp;#40;&quot;Successfully updated&quot;, &quot;&quot;, null, AlertType.INFO&amp;#41;;\n            display.setCurrent(warningAlert, searchForm);\n\n        }else if(c == changeDelCmd){\n            // Get selected index from the ChoiceGroup\n            int getSelInd = searchChoice.getSelectedIndex();\n\n            // Get the relevant element from Vector array according to the selected element from ChoiceGroup\n            ContactDetails getConInfo = (ContactDetails) vectorArray.elementAt(getSelInd);\n\n            // Get the record ID of the selected option\n            int recordId = getConInfo.getContactId();\n\n            try {\n                // The record is deleted from the record store by using deleteRecord()\n                // The recordId for this record is NOT reused.\n                openRecStore.deleteRecord(recordId);\n            } catch (RecordStoreException ex) {\n                ex.printStackTrace();\n            }\n            loadContacts();\n            warningAlert = new Alert&amp;#40;&quot;Permanantly Deleted !&quot;, &quot;&quot;, null, AlertType.CONFIRMATION&amp;#41;;\n            display.setCurrent(warningAlert, searchForm);\n        }\n    }\n\n    private void loadContacts() {\n        // Add following line to ignore the same contact add twice\n        searchChoice.deleteAll();\n\n        vectorArray = new Vector();\n        vectorArray.removeAllElements();\n\n        try {\n//---  Returns an enumeration for traversing a set of records in the record store in an optionally specified order.\n            //RecordEnumeration enuRec = openRecStore.enumerateRecords(this, this, true);\n            RecordEnumeration enuRec = openRecStore.enumerateRecords(this, this, true);\n\n            while (enuRec.hasNextElement()) {\n                try {\n                    // Take a recoed and convert it from byte array to String\n                    //byte[] nextRec = enuRec.nextRecord();\n                    //String nextRecStr = new String(nextRec);\n\n                    // Returns the recordId of the next record in this enumeration,\n                    // Where next is defined by the comparator and/or filter supplied in the constructor of this enumerator\n                    int recordId = enuRec.nextRecordId(); // Method in RecordEnumeration\n                    byte[] nextRec = openRecStore.getRecord(recordId); // Method in RecordStore\n                    String nextRecStr = new String(nextRec);\n\n                    // Seperate Name and the Phone number from the String\n                    // We have to assign the results after substring because Strings are immutable\n                    // That means when we assign a String to a variable it will &quot;never change&quot;\n                    String takeName = nextRecStr.substring(0, nextRecStr.indexOf(&quot;*&quot;));\n                    // nextRecStr.substring(0, nextRecStr.indexOf(&quot;*&quot;));\n                    // There is no error in the above line. It will create a String object as well.\n                    // But we can\'t access that object and it\'s get lost\n                    String takeNumber = nextRecStr.substring(nextRecStr.indexOf(&quot;*&quot;) + 1, nextRecStr.length());\n\n                    // Add the Name in to ChoiceGroup\n                    searchChoice.append(takeName, null);\n\n                    // Create a Vector class to put contacts. We use Vector because it is a growable array\n                    // But you can\'t initialize it here. Because we are calling removeAllElements() in above.\n                    // So have to create above all the related methods in Vector class\n                    // See first few lines after begining of loadContacts()\n\n                    // We need to put three variables (name, number and id) in to one element in the Vector array.\n                    // In addElement method we can only pass an Object.\n                    // So the best option is create an Object which is having above mentione attributes (name, number and id)\n                    ContactDetails conDet = new ContactDetails();\n                    conDet.setContactId(recordId);\n                    conDet.setContactName(takeName);\n                    conDet.setContactNumber(takeNumber);\n\n                    // Add attributes in the ContactDetails class to the Vector array\n                    // But it adds the specified component to the end of this vector, increasing its size by one.\n                    // Simply, Vector elements are ordered by index\n                    vectorArray.addElement(conDet);\n                    // But in a PhoneBook, we don\'t want to add a contact as it is.\n                    // We need to sort according to the name as an example first we expect to see the names begins with &quot;A&quot;\n                    // Here we need the compare(byte[] rec1, byte[] rec2) method which comes under RecordComparator\n\n                } catch (RecordStoreException ex) {\n                    ex.printStackTrace();\n                }\n            }\n        } catch (RecordStoreNotOpenException ex) {\n            ex.printStackTrace();\n        }\n    }\n\n    // Have to overwrite when we implemtnts RecordComparator\n    // Remeber to change the second argument in the enumerateRecords from null to this\n    public int compare(byte[] rec1, byte[] rec2) {\n\n        //System.out.println(&quot;Compairing        String data1 = new String(rec1);\n        String data2 = new String(rec2);\n\n        // Compares two strings lexicographically.\n        // The comparison is based on the Unicode value of each character in the strings.\n        // We use this to atore the contacts in lexicographically sorting order.\n        // Means when you add a new contact it will add to the correct place according to letters of the name.\n        int x = data1.compareTo(data2); // Method of String class        \n\n        //  System.out.println(data1);\n        //  System.out.println(data2);\n        //  System.out.println(x);\n\n        if(x == 0){\n            // System.out.println(&quot;Equal           return RecordComparator.EQUIVALENT;\n        }else if(x &lt; 0){\n            // System.out.println(&quot;Less&quot;);\n            return RecordComparator.PRECEDES;\n        }else{\n            // System.out.println(&quot;Greater&quot;);\n            return RecordComparator.FOLLOWS;\n        }\n\n        //throw new UnsupportedOperationException(&quot;Not supported yet.&quot;);\n    }\n\n    // Have to overwrite when implements ItemStateListener\n    public void itemStateChanged(Item item) {       \n        if(item == searchTxtField){\n            filterStr = searchTxtField.getString();\n            //System.out.println(&quot;Iteme Changed&quot;);\n            loadContacts();\n        }\n\n        //throw new UnsupportedOperationException(&quot;Not supported yet.&quot;);\n    }\n\n    // Have to overwrite when implements RecordFilter\n    // Remeber to change the first argument in the enumerateRecords from null to this\n    public boolean matches(byte[] candidate) {\n\n        //System.out.println(&quot;Recordering&quot;);\n\n        String candi = new String(candidate);\n\n        // Tests if this string starts with the specified prefix.\n        // We have initialized the filterStr above with the value &quot;&quot;\n        if (candi.startsWith(filterStr)) { // Method os String class\n            return true;\n        }\n        return false;\n\n        //throw new UnsupportedOperationException(&quot;Not supported yet.&quot;);\n    }\n\n    // Have to overwrite when implements ItemCommandListener\n    public void commandAction(Command c, Item item) {\n        if(c == viewCmd){\n\n            // Get selected index from the ChoiceGroup\n            int getSelInd = searchChoice.getSelectedIndex();\n            //System.out.println(getSelInd);\n\n            // Returns the component at the specified index by using elementAt()\n            ContactDetails getConInfo = (ContactDetails) vectorArray.elementAt(getSelInd);\n\n            changeNameTxtField.setString(getConInfo.getContactName());\n            changeNumberTxtField.setString(getConInfo.getContactNumber());\n            display.setCurrent(changeContactForm);\n        }\n        //throw new UnsupportedOperationException(&quot;Not supported yet.&quot;);\n    }\n}</code></pre></p> <p align="right"><span style="font-size: 60%">Add a code snippet to your website: <a href="https://www.paste.org" target="_blank">www.paste.org</a></span></p> </body> </html>'