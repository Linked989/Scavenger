b' <!DOCTYPE html> <html lang="en"> <head> <meta charset="utf-8"> <meta http-equiv="X-UA-Compatible" content="IE=edge"> <meta name="viewport" content="width=device-width, initial-scale=1">  <meta name="description" content="www.paste.org - allows users to paste snippets of text, usually samples of source code, for public viewing."> <meta name="author" content="An Australian"> <link rel="icon" href="/favicon.ico"> <title>Paste code - paste.org</title>  <link href="/assets/themes/bleh/css/github-highlight.css" rel="stylesheet"> <script src="/assets/themes/bleh/js/highlight.pack.js"></script> <script>hljs.initHighlightingOnLoad();</script> </head> <body> <p><pre><code class="java">package com.infoplus.db;\n\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\n\nimport android.content.Context;\nimport android.database.Cursor;\nimport android.database.SQLException;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteException;\nimport android.database.sqlite.SQLiteOpenHelper;\nimport android.util.Log;\nimport android.widget.Toast;\n\npublic class SqliteAdapter_InsideDB extends SQLiteOpenHelper {\n\n // The Android\'s default system path of your application database.\n private static String DB_PATH = &quot;/data/data/yourPackageName/databases/&quot;;\n\n private static String DB_NAME = &quot;your.db&quot;;\n\n private SQLiteDatabase database;\n\n private final Context myContext;\n\n /**\n  * Constructor Takes and keeps a reference of the passed context in order to\n  * access to the application assets and resources.\n  * \n  * @param context\n  */\n public SqliteAdapter_InsideDB(Context context) {\n\n  super(context, DB_NAME, null, 1);\n  this.myContext = context;\n  try {\n   createDataBase();\n  } catch (IOException e) {\n   // TODO Auto-generated catch block\n\n   e.printStackTrace();\n\n  } catch (Exception e) {\n   Log.e(&quot;DB-Exception&quot;, e.toString());\n  }\n } \n\n /**\n  * Creates a empty database on the system and rewrites it with your own\n  * database.\n  * */\n public void createDataBase() throws IOException {\n\n  boolean dbExist = checkDataBase();\n\n  if (dbExist) {\n   // do nothing - database already exist\n   openDataBase();\n\n  } else {\n\n   // By calling this method and empty database will be created into\n   // the default system path\n   // of your application so we are gonna be able to overwrite that\n   // database with our database.\n   this.getReadableDatabase();\n\n   try {\n\n    copyDataBase();\n    openDataBase();\n\n   } catch (IOException e) {\n\n    throw new Error(&quot;Error copying database&quot;);\n\n   }\n  }\n\n }\n\n /**\n  * Check if the database already exist to avoid re-copying the file each\n  * time you open the application.\n  * \n  * @return true if it exists, false if it doesn\'t\n  */\n private boolean checkDataBase() {\n\n  SQLiteDatabase checkDB = null;\n\n  try {\n   String myPath = DB_PATH + DB_NAME;\n   checkDB = SQLiteDatabase.openDatabase(myPath, null,\n     SQLiteDatabase.OPEN_READWRITE);\n\n  } catch (SQLiteException e) {\n\n   // database does\'t exist yet.\n\n  }\n  // if (database != null) {\n  // database.close();\n  // }\n  return checkDB != null ? true : false;\n }\n\n /**\n  * Copies your database from your local assets-folder to the just created\n  * empty database in the system folder, from where it can be accessed and\n  * handled. This is done by transfering bytestream.\n  * */\n private void copyDataBase() throws IOException {\n\n  // Open your local db as the input stream\n  InputStream myInput = myContext.getAssets().open(DB_NAME);\n\n  // Path to the just created empty db\n  String outFileName = DB_PATH + DB_NAME;\n\n  // Open the empty db as the output stream\n  OutputStream myOutput = new FileOutputStream(outFileName);\n\n  // transfer bytes from the inputfile to the outputfile\n  byte[] buffer = new byte[1024];\n  int length;\n  while ((length = myInput.read(buffer)) &gt; 0) {\n   myOutput.write(buffer, 0, length);\n  }\n\n  // Close the streams\n  myOutput.flush();\n  myOutput.close();\n  myInput.close();\n\n }\n\n public void openDataBase() throws SQLException {\n\n  // Open the database\n  String myPath = DB_PATH + DB_NAME;\n  database = SQLiteDatabase.openDatabase(myPath, null, \n    SQLiteDatabase.OPEN_READWRITE);\n\n }\n\n // public SqliteAdapter open() throws SQLException {\n // database = getWritableDatabase();\n // return this;\n // }\n\n @Override\n public synchronized void close() {\n\n  if (database != null)\n   database.close();\n\n  super.close();\n\n }\n\n @Override\n public void onCreate(SQLiteDatabase db) {\n\n }\n\n @Override\n public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n\n }\n\n // Add your public helper methods to access and get content from the\n // database.\n // You could return cursors by doing &quot;return myDataBase.query(....)&quot; so it\'d\n // be easy\n // to you to create adapters for your views.\n public boolean isOpen() {\n  if (database != null) {\n   return database.isOpen();\n  }\n  return false;\n }\n\n // public void close() {\n // if (database != null) {\n // database.close();\n // }\n // }\n\n public Cursor executeSQLQuery(String sql, String[] selectionArgs) {\n  Cursor cursor = null;\n  try {\n   if (database != null) {\n    cursor = database.rawQuery(sql, selectionArgs);\n   }\n  } catch (SQLiteException sqle) {\n   Toast.makeText(this.myContext,\n     &quot;Unable to execute sql query \\n&quot; + sqle.getMessage(),\n     Toast.LENGTH_SHORT).show();\n  }\n  return cursor;\n }\n\n public int getRow(String scanCodeNo) {\n  int count;\n  count = database\n    .query(&quot;table_name&quot;, null,\n      &quot;column_name&quot; + &quot; = \'&quot; + value + &quot;\'&quot;, null, null,\n      null, null).getCount();\n  database.close();\n  return count;\n }\n}</code></pre></p> <p align="right"><span style="font-size: 60%">Add a code snippet to your website: <a href="https://www.paste.org" target="_blank">www.paste.org</a></span></p> </body> </html>'