b' <!DOCTYPE html> <html lang="en"> <head> <meta charset="utf-8"> <meta http-equiv="X-UA-Compatible" content="IE=edge"> <meta name="viewport" content="width=device-width, initial-scale=1">  <meta name="description" content="www.paste.org - allows users to paste snippets of text, usually samples of source code, for public viewing."> <meta name="author" content="An Australian"> <link rel="icon" href="/favicon.ico"> <title>Paste code - paste.org</title>  <link href="/assets/themes/bleh/css/github-highlight.css" rel="stylesheet"> <script src="/assets/themes/bleh/js/highlight.pack.js"></script> <script>hljs.initHighlightingOnLoad();</script> </head> <body> <p><pre><code class="cpp">/**\n * @file WeightMatrix.cpp\n * @brief minimization algorithms on graphs represented by weight matrices\n * @author Dmitri Kuvshinov\n * @version rev.2\n */\n\n#include &lt;algorithm&gt;\n#include &lt;vector&gt;\n#include &lt;limits&gt;\n\n#include &lt;ctime&gt;\n#include &lt;cstdlib&gt;\n#include &lt;iostream&gt;\n\n/*\n\xd0\x9f\xd0\xbe\xd1\x81\xd1\x82\xd1\x80\xd0\xbe\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5 \xd0\xbe\xd1\x81\xd1\x82\xd0\xbe\xd0\xb2\xd0\xb0 \xd0\xbc\xd0\xb8\xd0\xbd\xd0\xb8\xd0\xbc\xd0\xb0\xd0\xbb\xd1\x8c\xd0\xbd\xd0\xbe\xd0\xb3\xd0\xbe \xd0\xb2\xd0\xb5\xd1\x81\xd0\xb0 \xd0\xb0\xd0\xbb\xd0\xb3\xd0\xbe\xd1\x80\xd0\xb8\xd1\x82\xd0\xbc\xd0\xbe\xd0\xbc \xd0\xaf\xd1\x80\xd0\xbd\xd0\xb8\xd0\xba\xd0\xb0-\xd0\x9f\xd1\x80\xd0\xb8\xd0\xbc\xd0\xb0-\xd0\x94\xd0\xb5\xd0\xb9\xd0\xba\xd1\x81\xd1\x82\xd1\x80\xd1\x8b.\n\xd0\x92\xd1\x85\xd0\xbe\xd0\xb4: N -- \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd0\xb2\xd0\xb5\xd1\x80\xd1\x88\xd0\xb8\xd0\xbd \xd0\xb2 \xd0\xb3\xd1\x80\xd0\xb0\xd1\x84\xd0\xb5, W -- \xd0\xbc\xd0\xb0\xd1\x82\xd1\x80\xd0\xb8\xd1\x86\xd0\xb0 \xd0\xb2\xd0\xb5\xd1\x81\xd0\xbe\xd0\xb2 \xd1\x80\xd1\x91\xd0\xb1\xd0\xb5\xd1\x80.\n\xd0\x92\xd1\x8b\xd1\x85\xd0\xbe\xd0\xb4: Pr -- \xd0\xbc\xd0\xb0\xd1\x81\xd1\x81\xd0\xb8\xd0\xb2 \xd0\xbf\xd1\x80\xd0\xb5\xd0\xb4\xd1\x88\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xb5\xd0\xbd\xd0\xbd\xd0\xb8\xd0\xba\xd0\xbe\xd0\xb2: \xd0\xbe\xd1\x81\xd1\x82\xd0\xbe\xd0\xb2 \xd1\x81\xd0\xbe\xd0\xb4\xd0\xb5\xd1\x80\xd0\xb6\xd0\xb8\xd1\x82 \xd1\x80\xd1\x91\xd0\xb1\xd1\x80\xd0\xb0 \xd0\xb2\xd0\xb8\xd0\xb4\xd0\xb0 (Pr[i], i), D -- \xd1\x85\xd1\x80\xd0\xb0\xd0\xbd\xd0\xb8\xd1\x82 \xd0\xb2\xd0\xb5\xd1\x81\xd0\xb0 \xd1\x8d\xd1\x82\xd0\xb8\xd1\x85 \xd1\x80\xd1\x91\xd0\xb1\xd0\xb5\xd1\x80.\n\xd0\x9d\xd0\xb5\xd0\xbf\xd0\xbe\xd1\x81\xd1\x80\xd0\xb5\xd0\xb4\xd1\x81\xd1\x82\xd0\xb2\xd0\xb5\xd0\xbd\xd0\xbd\xd0\xbe \xd1\x84\xd1\x83\xd0\xbd\xd0\xba\xd1\x86\xd0\xb8\xd1\x8f \xd0\xb2\xd0\xbe\xd0\xb7\xd0\xb2\xd1\x80\xd0\xb0\xd1\x89\xd0\xb0\xd0\xb5\xd1\x82 \xd0\xb2\xd0\xb5\xd1\x81 \xd0\xbf\xd0\xbe\xd1\x81\xd1\x82\xd1\x80\xd0\xbe\xd0\xb5\xd0\xbd\xd0\xbd\xd0\xbe\xd0\xb3\xd0\xbe \xd0\xbe\xd1\x81\xd1\x82\xd0\xbe\xd0\xb2\xd0\xb0 (\xd1\x81\xd1\x83\xd0\xbc\xd0\xbc\xd0\xb0 \xd1\x8d\xd0\xbb\xd0\xb5\xd0\xbc\xd0\xb5\xd0\xbd\xd1\x82\xd0\xbe\xd0\xb2 D).\n*/\n\n/// Jarnik-Prim-Dijkstra\ntemplate&lt;class Previous, class WeightVector, class WeightMatrix&gt;\ndouble minimalSpanningTree\n  (Previous &amp;Pr;, WeightVector &amp;D, const WeightMatrix &amp;W, unsigned N)\n{\n  if (N == 0) return 0.0; // \xd0\xbd\xd0\xb5\xd1\x82 \xd0\xb2\xd0\xb5\xd1\x80\xd1\x88\xd0\xb8\xd0\xbd -- \xd0\xbd\xd0\xb5\xd1\x82 \xd0\xbe\xd1\x81\xd1\x82\xd0\xbe\xd0\xb2\xd0\xb0\n\n  // \xd0\xbf\xd1\x80\xd0\xb8\xd0\xb7\xd0\xbd\xd0\xb0\xd0\xba &quot;\xd0\xbd\xd0\xb5\xd0\xb8\xd1\x81\xd0\xbf\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xb7\xd0\xbe\xd0\xb2\xd0\xb0\xd0\xbd\xd0\xbd\xd0\xbe\xd1\x81\xd1\x82\xd0\xb8&quot; \xd0\xb2\xd0\xb5\xd1\x80\xd1\x88\xd0\xb8\xd0\xbd\xd1\x8b\n  std::vector&lt;bool&gt; spare(N, true);\n\n  // \xd0\xbd\xd0\xb0\xd1\x87\xd0\xb8\xd0\xbd\xd0\xb0\xd0\xb5\xd0\xbc \xd1\x81 \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb2\xd0\xbe\xd0\xb9 \xd0\xb2\xd0\xb5\xd1\x80\xd1\x88\xd0\xb8\xd0\xbd\xd1\x8b (\xd0\xb8\xd0\xbd\xd0\xb4\xd0\xb5\xd0\xba\xd1\x81 0)\n  spare[0] = false; \n  for (unsigned v = 0; v &lt; N; ++v)\n  {\n    Pr[v] = 0;\n    D[v] = W(v, 0);\n  }\n\n  // N - 1 \xd1\x80\xd0\xb0\xd1\x83\xd0\xbd\xd0\xb4 \xd0\xbc\xd0\xb8\xd0\xbd\xd0\xb8\xd0\xbc\xd0\xb8\xd0\xb7\xd0\xb0\xd1\x86\xd0\xb8\xd0\xb8, \xd0\xba\xd0\xb0\xd0\xb6\xd0\xb4\xd1\x8b\xd0\xb9 \xd1\x80\xd0\xb0\xd1\x83\xd0\xbd\xd0\xb4 \xd0\xb8\xd0\xb7 \n  // \xd0\xbd\xd0\xb5\xd0\xb8\xd1\x81\xd0\xbf\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xb7\xd0\xbe\xd0\xb2\xd0\xb0\xd0\xbd\xd0\xbd\xd1\x8b\xd1\x85 \xd0\xb2\xd0\xb5\xd1\x80\xd1\x88\xd0\xb8\xd0\xbd \xd0\xb2\xd1\x8b\xd0\xb1\xd0\xb8\xd1\x80\xd0\xb0\xd0\xb5\xd1\x82\xd1\x81\xd1\x8f \xd0\xbe\xd0\xb4\xd0\xbd\xd0\xb0 \xd0\xb1\xd0\xbb\xd0\xb8\xd0\xb6\xd0\xb0\xd0\xb9\xd1\x88\xd0\xb0\xd1\x8f\n  for (unsigned round = 1; round &lt; N; ++round)\n  {\n    // \xd0\xbd\xd0\xb0\xd0\xb9\xd0\xb4\xd1\x91\xd0\xbc \xd0\xb1\xd0\xbb\xd0\xb8\xd0\xb6\xd0\xb0\xd0\xb9\xd1\x88\xd1\x83\xd1\x8e \xd0\xbf\xd1\x80\xd0\xbe\xd1\x81\xd1\x82\xd1\x8b\xd0\xbc \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb1\xd0\xbe\xd1\x80\xd0\xbe\xd0\xbc\n    unsigned v = 0;\n    double minD = std::numeric_limits&lt;double&gt;::infinity();\n    for (unsigned u = 0; u &lt; N; ++u)\n      if (spare[u] &amp;&amp; D[u] &lt; minD)\n      {\n        v = u;\n        minD = D[u];\n      }\n\n    // \xd0\xbf\xd0\xbe\xd0\xbc\xd0\xb5\xd1\x82\xd0\xb8\xd0\xbc \xd0\xbd\xd0\xb0\xd0\xb9\xd0\xb4\xd0\xb5\xd0\xbd\xd0\xbd\xd1\x83\xd1\x8e\n    // \xd1\x80\xd0\xb5\xd0\xb1\xd1\x80\xd0\xbe (Pr[v], v) \xd0\xb2\xd1\x85\xd0\xbe\xd0\xb4\xd0\xb8\xd1\x82 \xd0\xb2 \xd0\xbe\xd1\x81\xd1\x82\xd0\xbe\xd0\xb2\n    spare[v] = false;\n\n    // \xd0\xbe\xd0\xb1\xd0\xbd\xd0\xbe\xd0\xb2\xd0\xb8\xd0\xbc D \xd0\xb8 Pr \xd0\xb4\xd0\xbb\xd1\x8f \xd0\xbd\xd0\xb5\xd0\xb8\xd1\x81\xd0\xbf\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xb7\xd0\xbe\xd0\xb2\xd0\xb0\xd0\xbd\xd0\xbd\xd1\x8b\xd1\x85 \xd0\xb2\xd0\xb5\xd1\x80\xd1\x88\xd0\xb8\xd0\xbd\n    // \xd0\xbe\xd1\x82\xd0\xbd\xd0\xbe\xd1\x81\xd0\xb8\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8c\xd0\xbd\xd0\xbe \xd0\xbd\xd0\xb0\xd0\xb9\xd0\xb4\xd0\xb5\xd0\xbd\xd0\xbd\xd0\xbe\xd0\xb9 \xd0\xb2\xd0\xb5\xd1\x80\xd1\x88\xd0\xb8\xd0\xbd\xd1\x8b v\n    for (unsigned u = 0; u &lt; N; ++u)\n    {\n      if (spare[u] &amp;&amp; D[u] &gt; W(u, v))\n      {\n        Pr[u] = v;\n        D[u] = W(u, v);\n      }\n    }\n  }\n\n  // \xd0\xbf\xd0\xbe\xd1\x81\xd1\x87\xd0\xb8\xd1\x82\xd0\xb0\xd0\xb5\xd0\xbc \xd1\x81\xd1\x83\xd0\xbc\xd0\xbc\xd1\x83 \xd0\xb2\xd0\xb5\xd1\x81\xd0\xbe\xd0\xb2 \xd1\x80\xd1\x91\xd0\xb1\xd0\xb5\xd1\x80 \xd0\xbe\xd1\x81\xd1\x82\xd0\xbe\xd0\xb2\xd0\xb0\n  double weight = 0.0;\n  for (unsigned i = 0; i &lt; N; ++i)\n    weight += D[i];\n  return weight;\n}\n\n\n/*\n\xd0\x90\xd0\xbb\xd0\xb3\xd0\xbe\xd1\x80\xd0\xb8\xd1\x82\xd0\xbc \xd0\x94\xd0\xb5\xd0\xb9\xd0\xba\xd1\x81\xd1\x82\xd1\x80\xd1\x8b \xd0\xbf\xd0\xbe\xd0\xb8\xd1\x81\xd0\xba\xd0\xb0 \xd0\xba\xd1\x80\xd0\xb0\xd1\x82\xd1\x87\xd0\xb0\xd0\xb9\xd1\x88\xd0\xb8\xd1\x85 \xd0\xbf\xd1\x83\xd1\x82\xd0\xb5\xd0\xb9 \xd0\xb8\xd1\x85 \xd0\xb2\xd0\xb5\xd1\x80\xd1\x88\xd0\xb8\xd0\xbd\xd1\x8b S \xd0\xb4\xd0\xbe \xd0\xb2\xd1\x81\xd0\xb5\xd1\x85 \xd0\xbe\xd1\x81\xd1\x82\xd0\xb0\xd0\xbb\xd1\x8c\xd0\xbd\xd1\x8b\xd1\x85 \xd0\xb2\xd0\xb5\xd1\x80\xd1\x88\xd0\xb8\xd0\xbd \xd0\xb3\xd1\x80\xd0\xb0\xd1\x84\xd0\xb0.\n\xd0\xa2\xd1\x80\xd0\xb5\xd0\xb1\xd1\x83\xd1\x8e\xd1\x82\xd1\x81\xd1\x8f \xd0\xbd\xd0\xb5\xd0\xbe\xd1\x82\xd1\x80\xd0\xb8\xd1\x86\xd0\xb0\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8c\xd0\xbd\xd1\x8b\xd0\xb5 \xd0\xb2\xd0\xb5\xd1\x81\xd0\xb0 \xd1\x80\xd1\x91\xd0\xb1\xd0\xb5\xd1\x80 \xd0\xbc\xd0\xb0\xd1\x82\xd1\x80\xd0\xb8\xd1\x86\xd1\x8b W.\n\xd0\x92\xd1\x85\xd0\xbe\xd0\xb4: N -- \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd0\xb2\xd0\xb5\xd1\x80\xd1\x88\xd0\xb8\xd0\xbd \xd0\xb2 \xd0\xb3\xd1\x80\xd0\xb0\xd1\x84\xd0\xb5, S -- \xd0\xbd\xd0\xb0\xd1\x87\xd0\xb0\xd0\xbb\xd1\x8c\xd0\xbd\xd0\xb0\xd1\x8f \xd0\xb2\xd0\xb5\xd1\x80\xd1\x88\xd0\xb8\xd0\xbd\xd0\xb0, W -- \xd0\xbc\xd0\xb0\xd1\x82\xd1\x80\xd0\xb8\xd1\x86\xd0\xb0 \xd0\xb2\xd0\xb5\xd1\x81\xd0\xbe\xd0\xb2 \xd1\x80\xd1\x91\xd0\xb1\xd0\xb5\xd1\x80.\n\xd0\x92\xd1\x8b\xd1\x85\xd0\xbe\xd0\xb4: Pr -- \xd0\xbc\xd0\xb0\xd1\x81\xd1\x81\xd0\xb8\xd0\xb2 \xd0\xbf\xd1\x80\xd0\xb5\xd0\xb4\xd1\x88\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xb5\xd0\xbd\xd0\xbd\xd0\xb8\xd0\xba\xd0\xbe\xd0\xb2: \xd0\xba\xd1\x80\xd0\xb0\xd1\x82\xd1\x87\xd0\xb0\xd0\xb9\xd1\x88\xd0\xb8\xd0\xb9 \xd0\xbf\xd1\x83\xd1\x82\xd1\x8c \xd0\xb8\xd0\xb7 S \xd0\xb2 i \xd0\xbf\xd1\x80\xd0\xb8\xd1\x85\xd0\xbe\xd0\xb4\xd0\xb8\xd1\x82 \xd0\xb8\xd0\xb7 \xd0\xb2\xd0\xb5\xd1\x80\xd1\x88\xd0\xb8\xd0\xbd\xd1\x8b Pr[i],\n  D -- \xd0\xbc\xd0\xb0\xd1\x81\xd1\x81\xd0\xb8\xd0\xb2 \xd0\xb4\xd0\xbb\xd0\xb8\xd0\xbd \xd0\xbf\xd1\x83\xd1\x82\xd0\xb5\xd0\xb9, D[i] -- \xd0\xb4\xd0\xbb\xd0\xb8\xd0\xbd\xd0\xb0 \xd0\xbf\xd1\x83\xd1\x82\xd0\xb8 \xd0\xb8\xd0\xb7 S \xd0\xb2 i.\n*/\n\n/// Dijkstra\'s algorithm: distances from s to all other\ntemplate&lt;class Previous, class WeightVector, class WeightMatrix&gt;\nvoid dijkstra(\n    Previous &amp;Pr;, \n    WeightVector &amp;D,\n    const WeightMatrix &amp;W,\n    unsigned S,\n    unsigned N)\n{\n  // \xd0\xbf\xd1\x80\xd0\xb8\xd0\xb7\xd0\xbd\xd0\xb0\xd0\xba &quot;\xd0\xbd\xd0\xb5\xd0\xbf\xd1\x80\xd0\xbe\xd0\xb9\xd0\xb4\xd0\xb5\xd0\xbd\xd0\xbd\xd0\xbe\xd1\x81\xd1\x82\xd0\xb8&quot; \xd0\xb2\xd0\xb5\xd1\x80\xd1\x88\xd0\xb8\xd0\xbd\n  std::vector&lt;bool&gt; spare(N, true);\n  spare[S] = false;\n\n  // \xd0\xbf\xd0\xbe\xd0\xb4\xd0\xb3\xd0\xbe\xd1\x82\xd0\xbe\xd0\xb2\xd0\xba\xd0\xb0\n  for (unsigned i = 0; i &lt; N; ++i)\n  {\n    D[i] = W(S, i);\n    Pr[i] = S;\n  }\n \n  D[S] = 0;\n  \n\n  // \xd1\x80\xd0\xb0\xd1\x83\xd0\xbd\xd0\xb4\xd1\x8b \xd0\xbc\xd0\xb8\xd0\xbd\xd0\xb8\xd0\xbc\xd0\xb8\xd0\xb7\xd0\xb0\xd1\x86\xd0\xb8\xd0\xb8, \xd0\xba\xd0\xb0\xd0\xb6\xd0\xb4\xd1\x8b\xd0\xb9 \xd1\x80\xd0\xb0\xd1\x83\xd0\xbd\xd0\xb4\n  // \xd0\xb2\xd1\x8b\xd0\xb1\xd0\xb8\xd1\x80\xd0\xb0\xd0\xb5\xd1\x82\xd1\x81\xd1\x8f \xd0\xb2\xd0\xb5\xd1\x80\xd1\x88\xd0\xb8\xd0\xbd\xd0\xb0, \xd0\xb1\xd0\xbb\xd0\xb8\xd0\xb6\xd0\xb0\xd0\xb9\xd1\x88\xd0\xb0\xd1\x8f \xd0\xb8\xd0\xb7 \xd0\xbd\xd0\xb5\xd0\xbf\xd1\x80\xd0\xbe\xd0\xb9\xd0\xb4\xd0\xb5\xd0\xbd\xd0\xbd\xd1\x8b\xd1\x85\n  for (unsigned round = 1; round &lt; N; ++round)\n  {\n    // \xd0\xbd\xd0\xb0\xd0\xb9\xd0\xb4\xd1\x91\xd0\xbc \xd0\xb1\xd0\xbb\xd0\xb8\xd0\xb6\xd0\xb0\xd0\xb9\xd1\x88\xd1\x83\xd1\x8e \xd0\xbf\xd1\x80\xd0\xbe\xd1\x81\xd1\x82\xd1\x8b\xd0\xbc \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb1\xd0\xbe\xd1\x80\xd0\xbe\xd0\xbc\n    unsigned v = 0;\n    double minD = std::numeric_limits&lt;double&gt;::infinity();\n    for (unsigned u = 0; u &lt; N; ++u)\n      if (spare[u] &amp;&amp; D[u] &lt; minD)\n      {\n        v = u;\n        minD = D[u];\n      }\n\n    // \xd0\xbf\xd0\xbe\xd0\xbc\xd0\xb5\xd1\x82\xd0\xb8\xd0\xbc \xd0\xb5\xd1\x91 \xd0\xba\xd0\xb0\xd0\xba \xd0\xbf\xd1\x80\xd0\xbe\xd0\xb9\xd0\xb4\xd0\xb5\xd0\xbd\xd0\xbd\xd1\x83\xd1\x8e\n    spare[v] = false;\n    \n    // \xd0\xbe\xd0\xb1\xd0\xbd\xd0\xbe\xd0\xb2\xd0\xb8\xd0\xbc D \xd0\xb8 Pr \xd0\xb4\xd0\xbb\xd1\x8f \xd0\xbd\xd0\xb5\xd0\xbf\xd1\x80\xd0\xbe\xd0\xb9\xd0\xb4\xd0\xb5\xd0\xbd\xd0\xbd\xd1\x8b\xd1\x85 \xd0\xb2\xd0\xb5\xd1\x80\xd1\x88\xd0\xb8\xd0\xbd\n    // \xd0\xbe\xd1\x82\xd0\xbd\xd0\xbe\xd1\x81\xd0\xb8\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8c\xd0\xbd\xd0\xbe \xd0\xbd\xd0\xb0\xd0\xb9\xd0\xb4\xd0\xb5\xd0\xbd\xd0\xbd\xd0\xbe\xd0\xb9 \xd0\xb2\xd0\xb5\xd1\x80\xd1\x88\xd0\xb8\xd0\xbd\xd1\x8b v\n    for (unsigned u = 0; u &lt; N; ++u)\n      if (spare[u])\n      {\n        const double weight = D[v] + W(v, u);\n        if (weight &lt; D[u])\n        {\n          D[u] = weight;\n          Pr[u] = v;\n        }\n      }\n  }\n}\n\n\n/*\n\xd0\x90\xd0\xbb\xd0\xb3\xd0\xbe\xd1\x80\xd0\xb8\xd1\x82\xd0\xbc \xd0\xa4\xd0\xbb\xd0\xbe\xd0\xb9\xd0\xb4\xd0\xb0-\xd0\xa3\xd0\xbe\xd1\x80\xd1\x88\xd0\xb5\xd0\xbb\xd0\xbb\xd0\xb0 \xd0\xbf\xd0\xbe\xd0\xb8\xd1\x81\xd0\xba\xd0\xb0 \xd0\xba\xd1\x80\xd0\xb0\xd1\x82\xd1\x87\xd0\xb0\xd0\xb9\xd1\x88\xd0\xb8\xd1\x85 \xd0\xbf\xd1\x83\xd1\x82\xd0\xb5\xd0\xb9 \xd0\xbc\xd0\xb5\xd0\xb6\xd0\xb4\xd1\x83 \xd0\xb2\xd1\x81\xd0\xb5\xd0\xbc\xd0\xb8 \xd0\xbf\xd0\xb0\xd1\x80\xd0\xb0\xd0\xbc\xd0\xb8 \xd0\xb2\xd0\xb5\xd1\x80\xd1\x88\xd0\xb8\xd0\xbd.\n\xd0\x92\xd1\x85\xd0\xbe\xd0\xb4: N -- \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd0\xb2\xd0\xb5\xd1\x80\xd1\x88\xd0\xb8\xd0\xbd \xd0\xb2 \xd0\xb3\xd1\x80\xd0\xb0\xd1\x84\xd0\xb5, W -- \xd0\xbc\xd0\xb0\xd1\x82\xd1\x80\xd0\xb8\xd1\x86\xd0\xb0 \xd0\xb2\xd0\xb5\xd1\x81\xd0\xbe\xd0\xb2 \xd1\x80\xd1\x91\xd0\xb1\xd0\xb5\xd1\x80.\n\xd0\x92\xd1\x8b\xd1\x85\xd0\xbe\xd0\xb4: Pr -- \xd0\xbc\xd0\xb0\xd1\x82\xd1\x80\xd0\xb8\xd1\x86\xd0\xb0 \xd0\xbf\xd1\x80\xd0\xb5\xd0\xb4\xd1\x88\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xb5\xd0\xbd\xd0\xbd\xd0\xb8\xd0\xba\xd0\xbe\xd0\xb2: \xd0\xbd\xd0\xb0 \xd0\xbf\xd1\x83\xd1\x82\xd0\xb8 \xd0\xb8\xd0\xb7 i \xd0\xb2 j \xd0\xb2\xd0\xb5\xd1\x80\xd1\x88\xd0\xb8\xd0\xbd\xd0\xb0 Pr(i, j) \xd0\xbf\xd1\x80\xd0\xb5\xd0\xb4\xd1\x88\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd1\x83\xd0\xb5\xd1\x82 j,\n  D -- \xd0\xbc\xd0\xb0\xd1\x82\xd1\x80\xd0\xb8\xd1\x86\xd0\xb0 \xd0\xb4\xd0\xbb\xd0\xb8\xd0\xbd \xd0\xbf\xd1\x83\xd1\x82\xd0\xb5\xd0\xb9: D(i, j) -- \xd0\xb4\xd0\xbb\xd0\xb8\xd0\xbd\xd0\xb0 \xd0\xba\xd1\x80\xd0\xb0\xd1\x82\xd1\x87\xd0\xb0\xd0\xb9\xd1\x88\xd0\xb5\xd0\xb3\xd0\xbe \xd0\xbf\xd1\x83\xd1\x82\xd0\xb8 \xd0\xb8\xd0\xb7 i \xd0\xb2 j.\n*/\n\n/// Floyd\xe2\x80\x93Warshall algorithm: distances between all pairs of vertices\ntemplate&lt;class PreviousMatrix, class WeightMatrix&gt;\nvoid floyd(\n    PreviousMatrix &amp;Pr;, \n    WeightMatrix &amp;D, \n    const WeightMatrix &amp;W,\n    unsigned N)\n{\n  // \xd0\xbf\xd0\xbe\xd0\xb4\xd0\xb3\xd0\xbe\xd1\x82\xd0\xbe\xd0\xb2\xd0\xba\xd0\xb0\n  D = W;\n  for (unsigned i = 0; i &lt; N; ++i)\n    for (unsigned j = 0; j &lt; N; ++j)\n      Pr(i, j) = i;\n\n  // \xd0\xbc\xd0\xb8\xd0\xbd\xd0\xb8\xd0\xbc\xd0\xb8\xd0\xb7\xd0\xb0\xd1\x86\xd0\xb8\xd1\x8f\n  for (unsigned k = 0; k &lt; N; ++k)\n    for (unsigned i = 0; i &lt; N; ++i)\n    {\n      const double D_ik = D(i, k);\n      for (unsigned j = 0; j &lt; N; ++j)\n      {\n        const double weight = D_ik + D(k, j);\n        if (weight &lt; D(i, j))\n        {\n          D(i, j) = weight;\n          Pr(i, j) = Pr(k, j);\n        }\n      }\n    }\n}\n\n\n/*\n\xd0\x9f\xd1\x80\xd0\xbe\xd1\x81\xd1\x82\xd0\xb5\xd0\xb9\xd1\x88\xd0\xb0\xd1\x8f &quot;\xd0\xbd\xd0\xb0\xd0\xb8\xd0\xb2\xd0\xbd\xd0\xb0\xd1\x8f&quot; \xd1\x80\xd0\xb5\xd0\xb0\xd0\xbb\xd0\xb8\xd0\xb7\xd0\xb0\xd1\x86\xd0\xb8\xd1\x8f \xd0\xbc\xd0\xb0\xd1\x82\xd1\x80\xd0\xb8\xd1\x86\xd1\x8b \xd0\xba\xd0\xb0\xd0\xba \xd0\xb2\xd0\xb5\xd0\xba\xd1\x82\xd0\xbe\xd1\x80\xd0\xb0 \xd0\xb2\xd0\xb5\xd0\xba\xd1\x82\xd0\xbe\xd1\x80\xd0\xbe\xd0\xb2.\n*/\n\n/// simplest matrix implemenation over std::vector\ntemplate&lt;class T = double&gt;\nclass NaiveMatrix\n{\n  std::vector&lt; std::vector&lt;T&gt; &gt; data;\n\npublic:\n  // \xd1\x81\xd0\xbe\xd0\xb7\xd0\xb4\xd0\xb0\xd1\x82\xd1\x8c \xd0\xbf\xd1\x83\xd1\x81\xd1\x82\xd1\x83\xd1\x8e \xd0\xbc\xd0\xb0\xd1\x82\xd1\x80\xd0\xb8\xd1\x86\xd1\x83\n  NaiveMatrix() {}\n\n  // \xd1\x81\xd0\xbe\xd0\xb7\xd0\xb4\xd0\xb0\xd1\x82\xd1\x8c \xd0\xbc\xd0\xb0\xd1\x82\xd1\x80\xd0\xb8\xd1\x86\xd1\x83 N \xd0\xbd\xd0\xb0 M, \xd1\x8d\xd0\xbb\xd0\xb5\xd0\xbc\xd0\xb5\xd0\xbd\xd1\x82\xd1\x8b \xd0\xba\xd0\xbe\xd1\x82\xd0\xbe\xd1\x80\xd0\xbe\xd0\xb9 \xd0\xb1\xd1\x83\xd0\xb4\xd1\x83\xd1\x82 \xd1\x80\xd0\xb0\xd0\xb2\xd0\xbd\xd1\x8b value\n  NaiveMatrix(unsigned N, unsigned M, T value = T(0))\n    : data(N)\n  {\n    for (unsigned i = 0; i &lt; M; ++i)\n      data[i].resize(M, value);\n  }\n\n  // \xd0\xb4\xd0\xbe\xd1\x81\xd1\x82\xd1\x83\xd0\xbf \xd0\xba \xd1\x8d\xd0\xbb\xd0\xb5\xd0\xbc\xd0\xb5\xd0\xbd\xd1\x82\xd1\x83 i, j\n  T&amp; operator()(unsigned i, unsigned j)\n  {\n    return data[i][j];\n  }\n\n  // \xd0\xba\xd0\xbe\xd0\xbd\xd1\x81\xd1\x82\xd0\xb0\xd0\xbd\xd1\x82\xd0\xbd\xd1\x8b\xd0\xb9 \xd0\xb4\xd0\xbe\xd1\x81\xd1\x82\xd1\x83\xd0\xbf \xd0\xba \xd1\x8d\xd0\xbb\xd0\xb5\xd0\xbc\xd0\xb5\xd0\xbd\xd1\x82\xd1\x83 i, j\n  T operator()(unsigned i, unsigned j) const\n  {\n    return data[i][j];\n  }\n\n  // \xd1\x80\xd0\xb0\xd0\xb7\xd0\xbc\xd0\xb5\xd1\x80 \xd0\xbc\xd0\xb0\xd1\x82\xd1\x80\xd0\xb8\xd1\x86\xd1\x8b \xd0\xbf\xd0\xbe \xd0\xbf\xd0\xb5\xd1\x80\xd0\xb2\xd0\xbe\xd0\xb9 \xd0\xba\xd0\xbe\xd0\xbe\xd1\x80\xd0\xb4\xd0\xb8\xd0\xbd\xd0\xb0\xd1\x82\xd0\xb5\n  unsigned size1() const\n  {\n    return data.size();\n  }\n\n  // \xd1\x80\xd0\xb0\xd0\xb7\xd0\xbc\xd0\xb5\xd1\x80 \xd0\xbc\xd0\xb0\xd1\x82\xd1\x80\xd0\xb8\xd1\x86\xd1\x8b \xd0\xbf\xd0\xbe \xd0\xb2\xd1\x82\xd0\xbe\xd1\x80\xd0\xbe\xd0\xb9 \xd0\xba\xd0\xbe\xd0\xbe\xd1\x80\xd0\xb4\xd0\xb8\xd0\xbd\xd0\xb0\xd1\x82\xd0\xb5\n  unsigned size2() const\n  {\n    return data.front().size();\n  }\n\n  // \xd0\xb2\xd1\x8b\xd0\xb2\xd0\xbe\xd0\xb4 \xd0\xbc\xd0\xb0\xd1\x82\xd1\x80\xd0\xb8\xd1\x86\xd1\x8b \xd0\xb2 cout\n  void print() const\n  {\n    for (unsigned i = 0; i &lt; data.size(); ++i)\n    {\n      const std::vector&lt;T&gt; &amp;row; = data[i];\n      for (unsigned j = 0; j &lt; row.size(); ++j)\n        std::cout &lt;&lt; row[j] &lt;&lt; \'\\t\';\n      std::cout &lt;&lt; \'\\n\';\n    }\n  }\n};\n\n\n\n/*\n\xd0\xa1\xd0\xbb\xd1\x83\xd1\x87\xd0\xb0\xd0\xb9\xd0\xbd\xd0\xbe\xd0\xb5 \xd0\xb7\xd0\xb0\xd0\xbf\xd0\xbe\xd0\xbb\xd0\xbd\xd0\xb5\xd0\xbd\xd0\xb8\xd0\xb5 \xd0\xbc\xd0\xb0\xd1\x82\xd1\x80\xd0\xb8\xd1\x86\xd1\x8b.\n\xd0\x92\xd1\x85\xd0\xbe\xd0\xb4: N -- \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd0\xb2\xd0\xb5\xd1\x80\xd1\x88\xd0\xb8\xd0\xbd, k -- \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd0\xb8\xd1\x81\xd1\x85\xd0\xbe\xd0\xb4\xd1\x8f\xd1\x89\xd0\xb8\xd1\x85 \xd1\x80\xd1\x91\xd0\xb1\xd0\xb5\xd1\x80 \xd0\xb8\xd0\xb7 \xd0\xba\xd0\xb0\xd0\xb6\xd0\xb4\xd0\xbe\xd0\xb9 \xd0\xb2\xd0\xb5\xd1\x80\xd1\x88\xd0\xb8\xd0\xbd\xd1\x8b.\n\xd0\x92\xd1\x8b\xd1\x85\xd0\xbe\xd0\xb4: W -- \xd0\xbc\xd0\xb0\xd1\x82\xd1\x80\xd0\xb8\xd1\x86\xd0\xb0 \xd0\xb2\xd0\xb5\xd1\x81\xd0\xbe\xd0\xb2 (\xd0\xbd\xd0\xb0\xd0\xb4\xd0\xbe \xd0\xbf\xd1\x80\xd0\xb5\xd0\xb4\xd0\xb2\xd0\xb0\xd1\x80\xd0\xb8\xd1\x82\xd0\xb5\xd0\xbb\xd1\x8c\xd0\xbd\xd0\xbe \xd0\xb7\xd0\xb0\xd0\xbf\xd0\xbe\xd0\xbb\xd0\xbd\xd0\xb8\xd1\x82\xd1\x8c &quot;\xd0\xb1\xd0\xb5\xd1\x81\xd0\xba\xd0\xbe\xd0\xbd\xd0\xb5\xd1\x87\xd0\xbd\xd0\xbe\xd1\x81\xd1\x82\xd1\x8f\xd0\xbc\xd0\xb8&quot;).\n*/\n\n/// make random k-halfdegree graph, N &lt;= RAND_MAX, k &lt; N\ntemplate&lt;class WeightMatrix&gt;\nvoid randomMatrix(WeightMatrix &amp;W, unsigned k, unsigned N)\n{\n  std::vector&lt;bool&gt; pos(N - 1, false);\n  std::fill(pos.begin(), pos.begin() + k, true);\n\n  for (unsigned i = 0; i &lt; N; ++i)\n  {\n    std::random_shuffle(pos.begin(), pos.end());\n    for (unsigned j = 0; j &lt; i; ++j)\n      if (pos[j])\n        W(i, j) = std::rand();\n\n    W(i, i) = 0;\n\n    for (unsigned j = i + 1; j &lt; N; ++j)\n      if (pos[j - 1])\n        W(i, j) = std::rand();\n  }\n}\n\n\n/*\n\xd0\x9f\xd1\x80\xd0\xbe\xd1\x81\xd1\x82\xd0\xb0\xd1\x8f \xd1\x80\xd0\xb5\xd0\xb0\xd0\xbb\xd0\xb8\xd0\xb7\xd0\xb0\xd1\x86\xd0\xb8\xd1\x8f \xd1\x82\xd0\xb0\xd0\xb9\xd0\xbc\xd0\xb5\xd1\x80\xd0\xb0 \xd0\xb4\xd0\xbb\xd1\x8f \xd0\xb7\xd0\xb0\xd0\xbc\xd0\xb5\xd1\x80\xd0\xb0 \xd0\xbf\xd1\x80\xd0\xbe\xd0\xbc\xd0\xb5\xd0\xb6\xd1\x83\xd1\x82\xd0\xba\xd0\xbe\xd0\xb2 \xd0\xb2\xd1\x80\xd0\xb5\xd0\xbc\xd0\xb5\xd0\xbd\xd0\xb8.\n*/\n\n/// simple timer implementation\nclass Timer\n{\n  clock_t t;\npublic:\n  Timer() : t(clock()) {}\n  clock_t operator()()\n  {\n    clock_t d = clock() - t;\n    t += d;\n    return d;\n  }\n};\n\n\n// \xd1\x82\xd0\xb5\xd1\x81\xd1\x82\xd1\x8b\nclass TestCase\n{\n  static const unsigned N = 1700; // \xd0\xba\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd0\xb2\xd0\xb5\xd1\x80\xd1\x88\xd0\xb8\xd0\xbd\n  NaiveMatrix&lt;&gt; weights;\n\npublic:\n\n  // \xd1\x81\xd0\xbe\xd0\xb7\xd0\xb4\xd0\xb0\xd0\xb4\xd0\xb8\xd0\xbc \xd1\x81\xd0\xbb\xd1\x83\xd1\x87\xd0\xb0\xd0\xb9\xd0\xbd\xd1\x83\xd1\x8e \xd0\xbc\xd0\xb0\xd1\x82\xd1\x80\xd0\xb8\xd1\x86\xd1\x83 \xd0\xb2\xd0\xb5\xd1\x81\xd0\xbe\xd0\xb2\n  TestCase()\n    : weights(N, N, std::numeric_limits&lt;double&gt;::infinity())\n  {\n    randomMatrix(weights, N / 4, N);\n    if (N &lt;= 10)\n      weights.print();\n  }\n\n\n  // \xd1\x82\xd0\xb5\xd1\x81\xd1\x82 1\n  void testSpanningTree()\n  {\n    using namespace std;\n    // \xd0\xbc\xd0\xb8\xd0\xbd\xd0\xb8\xd0\xbc\xd0\xb0\xd0\xbb\xd1\x8c\xd0\xbd\xd1\x8b\xd0\xb9 \xd0\xbe\xd1\x81\xd1\x82\xd0\xbe\xd0\xb2\n    vector&lt;unsigned&gt; prev(N, 0);\n    vector&lt;double&gt; dist(N, numeric_limits&lt;double&gt;::infinity());\n    cout &lt;&lt; minimalSpanningTree(prev, dist, weights, N) &lt;&lt; endl;\n\n    // \xd0\xb7\xd0\xb0\xd0\xbc\xd0\xb5\xd1\x80\xd0\xb8\xd1\x82\xd1\x8c \xd1\x81\xd0\xba\xd0\xbe\xd1\x80\xd0\xbe\xd1\x81\xd1\x82\xd1\x8c \xd0\xb0\xd0\xbb\xd0\xb3\xd0\xbe\xd1\x80\xd0\xb8\xd1\x82\xd0\xbc\xd0\xb0 \xd0\xbf\xd0\xbe\xd1\x81\xd1\x82\xd1\x80\xd0\xbe\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xbc\xd0\xb8\xd0\xbd\xd0\xb8\xd0\xbc\xd0\xb0\xd0\xbb\xd1\x8c\xd0\xbd\xd0\xbe\xd0\xb3\xd0\xbe \xd0\xbe\xd1\x81\xd1\x82\xd0\xbe\xd0\xb2\xd0\xb0\n    Timer timer;\n    for (int i = N / 6; i; --i) // N/6 \xd0\xbf\xd0\xbe\xd0\xb2\xd1\x82\xd0\xbe\xd1\x80\xd0\xbe\xd0\xb2\n    {\n      // \xd0\xbe\xd1\x87\xd0\xb8\xd1\x81\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c prev \xd0\xb8 dist\n      fill(prev.begin(), prev.end(), 0);\n      fill(dist.begin(), dist.end(), numeric_limits&lt;double&gt;::infinity());\n\n      minimalSpanningTree(prev, dist, weights, N);\n    }\n\n    cout &lt;&lt; &quot;spanning tree time = &quot; &lt;&lt; timer() &lt;&lt; endl;\n  }\n\n  \n  // \xd1\x82\xd0\xb5\xd1\x81\xd1\x82 2\n  void testDijkstra()\n  {\n    using namespace std;\n    // \xd0\xbd\xd0\xb0\xd0\xb9\xd1\x82\xd0\xb8 \xd0\xba\xd1\x80\xd0\xb0\xd1\x82\xd1\x87\xd0\xb0\xd0\xb9\xd1\x88\xd0\xb8\xd0\xb5 \xd0\xbf\xd1\x83\xd1\x82\xd0\xb8 \xd0\xb8\xd0\xb7 \xd0\xb2\xd0\xb5\xd1\x80\xd1\x88\xd0\xb8\xd0\xbd\xd1\x8b 0\n    vector&lt;unsigned&gt; prev(N, 0);\n    vector&lt;double&gt; dist(N, std::numeric_limits&lt;double&gt;::infinity());\n    dijkstra(prev, dist, weights, 0, N);\n    cout &lt;&lt; dist[N / 2] &lt;&lt; endl;\n\n    // \xd0\xb7\xd0\xb0\xd0\xbc\xd0\xb5\xd1\x80\xd0\xb8\xd1\x82\xd1\x8c \xd1\x81\xd0\xba\xd0\xbe\xd1\x80\xd0\xbe\xd1\x81\xd1\x82\xd1\x8c \xd0\xb0\xd0\xbb\xd0\xb3\xd0\xbe\xd1\x80\xd0\xb8\xd1\x82\xd0\xbc\xd0\xb0 \xd0\x94\xd0\xb5\xd0\xb9\xd0\xba\xd1\x81\xd1\x82\xd1\x80\xd1\x8b\n    Timer timer;\n    for (int i = N / 2; i; --i)  // N/2 \xd0\xbf\xd0\xbe\xd0\xb2\xd1\x82\xd0\xbe\xd1\x80\xd0\xbe\xd0\xb2\n    {\n      // \xd0\xbe\xd1\x87\xd0\xb8\xd1\x81\xd1\x82\xd0\xb8\xd1\x82\xd1\x8c prev \xd0\xb8 dist\n      fill(prev.begin(), prev.end(), 0);\n      fill(dist.begin(), dist.end(), numeric_limits&lt;double&gt;::infinity());\n\n      dijkstra(prev, dist, weights, i - 1, N);\n    }\n\n    cout &lt;&lt; &quot;dijkstra time = &quot; &lt;&lt; timer() &lt;&lt; endl;\n  }\n\n\n  // \xd1\x82\xd0\xb5\xd1\x81\xd1\x82 3\n  void testFloyd()\n  {\n    using namespace std;\n    // \xd0\xbd\xd0\xb0\xd0\xb9\xd1\x82\xd0\xb8 \xd0\xba\xd1\x80\xd0\xb0\xd1\x82\xd1\x87\xd0\xb0\xd0\xb9\xd1\x88\xd0\xb8\xd0\xb5 \xd0\xbf\xd1\x83\xd1\x82\xd0\xb8 \xd0\xbc\xd0\xb5\xd0\xb6\xd0\xb4\xd1\x83 \xd0\xb2\xd1\x81\xd0\xb5\xd0\xbc\xd0\xb8 \xd0\xbf\xd0\xb0\xd1\x80\xd0\xb0\xd0\xbc\xd0\xb8 \xd0\xb2\xd0\xb5\xd1\x80\xd1\x88\xd0\xb8\xd0\xbd\n    NaiveMatrix&lt;unsigned&gt; prevmat(N, N);\n    NaiveMatrix&lt;&gt; distmat(N, N);\n    // \xd0\xbe\xd0\xb4\xd0\xbd\xd0\xbe\xd0\xb2\xd1\x80\xd0\xb5\xd0\xbc\xd0\xb5\xd0\xbd\xd0\xbd\xd0\xbe \xd0\xb7\xd0\xb0\xd0\xbc\xd0\xb5\xd1\x80\xd0\xb8\xd0\xbc \xd1\x81\xd0\xba\xd0\xbe\xd1\x80\xd0\xbe\xd1\x81\xd1\x82\xd1\x8c \xd0\xbe\xd0\xb4\xd0\xbd\xd0\xbe\xd0\xb3\xd0\xbe \xd0\xbf\xd1\x80\xd0\xbe\xd0\xb3\xd0\xbe\xd0\xbd\xd0\xb0 \xd0\xb0\xd0\xbb\xd0\xb3\xd0\xbe\xd1\x80\xd0\xb8\xd1\x82\xd0\xbc\xd0\xb0 \xd0\xa4\xd0\xbb\xd0\xbe\xd0\xb9\xd0\xb4\xd0\xb0-\xd0\xa3\xd0\xbe\xd1\x80\xd1\x88\xd0\xb5\xd0\xbb\xd0\xbb\xd0\xb0\n    Timer timer;\n\n    floyd(prevmat, distmat, weights, N);\n    cout &lt;&lt; distmat(0, N / 2);\n    cout &lt;&lt; &quot;\\nfloyd time = &quot; &lt;&lt; timer() &lt;&lt; endl;\n  }\n};\n\n\nint main()\n{\n  using namespace std;\n  \n  srand(time(NULL));\n  TestCase tc;\n  tc.testSpanningTree();\n  tc.testDijkstra();\n  tc.testFloyd();\n\n  cin.get();\n  return 0;\n}\n</code></pre></p> <p align="right"><span style="font-size: 60%">Add a code snippet to your website: <a href="https://www.paste.org" target="_blank">www.paste.org</a></span></p> </body> </html>'