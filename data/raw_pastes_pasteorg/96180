b' <!DOCTYPE html> <html lang="en"> <head> <meta charset="utf-8"> <meta http-equiv="X-UA-Compatible" content="IE=edge"> <meta name="viewport" content="width=device-width, initial-scale=1">  <meta name="description" content="www.paste.org - allows users to paste snippets of text, usually samples of source code, for public viewing."> <meta name="author" content="An Australian"> <link rel="icon" href="/favicon.ico"> <title>Paste code - paste.org</title>  <link href="/assets/themes/bleh/css/github-highlight.css" rel="stylesheet"> <script src="/assets/themes/bleh/js/highlight.pack.js"></script> <script>hljs.initHighlightingOnLoad();</script> </head> <body> <p><pre><code class="python">import collections, sys\nfrom Bio import Seq, SeqIO, SeqRecord\n\n# Lesum inn \xc3\xb6ll g\xc3\xb6gnin og tilgreinum k\nr1 = open ( \'reads_1.fastq\' , \'r\')\nr2 = open ( \'reads_2.fastq\' , \'r\')\nreads1 = SeqIO.parse(r1,\'fastq\')\nreads2 = SeqIO.parse(r2,\'fastq\')\nk = 21\n\n# \xc3\x9eetta fall les yfir g\xc3\xb6gnin og tilgreinir k-mera og fj\xc3\xb6lda \xc3\xbeeirra, \xc3\xbe.e. coverage\ndef parseRead(reads, k):\n    dict = collections.defaultdict(int)\n    count = 0\n    for r in reads:\n        read = str(r.seq)\n        count += 1\n        for i in range(len(read)-k+1):\n            dict[read[i:i + k - 1]] += 1\n            rcKmer = Seq.reverse_complement(read[i:i + k - 1])\n            dict[rcKmer] += 1\n        print(count)\n    return dict\n\n# K\xc3\xb6llum h\xc3\xa9r \xc3\xad parse falli\xc3\xb0 fyrir fyrra gagnasetti\xc3\xb0, getum b\xc3\xa6tt vi\xc3\xb0 seinna vi\xc3\xb0 s\xc3\xad\xc3\xb0ar\ndict = parseRead(reads1, k)\n\n# H\xc3\xa9r hendum vi\xc3\xb0 k-merum me\xc3\xb0 l\xc3\xadti\xc3\xb0 coverage. minCoverage = 1 hendir um 1.000.000\n# k-merum, en fj\xc3\xb6ldi k-mera sem er hent fer hratt l\xc3\xa6kkandi fyrir minCoverage &gt; 1\nd1 = [x for x in dict if dict[x] &lt;= 1]\nfor x in d1:\n    del dict[x]\n\n# Hr\xc3\xa6\xc3\xb0ilegt sk\xc3\xadtamix til a\xc3\xb0 frumstilla lista. H\xc3\xa6gt a\xc3\xb0 b\xc3\xa6ta \xc3\xbeetta\ndef makeList(n):\n    ret = []\n    for i in range(0, n):\n        ret.append(\'\');\n    return ret\n\n# H\xc3\xa9r gerast t\xc3\xb6frarnir\ndef deBrujinMaker3000(d):\n    # Skipti k-merunum upp \xc3\xad tvo lista, \xc3\xbe.e. til og fr\xc3\xa1.\n    til = []\n    fra = []\n    dna = list(d.keys())\n    k = len(dna[0])\n\n    # \xc3\x8dtra yfir alla kmera og tengi \xc3\xbe\xc3\xa1 saman\n    for i in range(0, len(dna)):\n        print(&quot;Fr\xc3\xa1+Til: &quot;, i)\n        for j in range(0, len(dna[i])-k+1):\n            fra.append(dna[i][j:j+k-1])\n            til.append(dna[i][j+1:j+k])\n\n    seen = collections.defaultdict(int)\n    newTil = makeList(1200000)\n\n    # H\xc3\xa9r \xc3\xadtrum vi\xc3\xb0 yfir fr\xc3\xa1 listann og h\xc3\xb6ldum vi\xc3\xb0 utan um hva\xc3\xb0a kmera vi\xc3\xb0 h\xc3\xb6fum s\xc3\xa9\xc3\xb0.\n    # Ef vi\xc3\xb0 h\xc3\xb6fum ekki s\xc3\xa9\xc3\xb0 k-merinn \xc3\xbe\xc3\xa1 setjum vi\xc3\xb0 hann \xc3\xad [seen] og setjum samsvarandi\n    # k-mer \xc3\xbar [til] \xc3\xad [newTil]. Ef vi\xc3\xb0 h\xc3\xb6fum s\xc3\xa9\xc3\xb0 k-merinn \xc3\xa1\xc3\xb0ur \xc3\xbe\xc3\xa1 setjum vi\xc3\xb0 hann ekki\n    # \xc3\xad [seen], en setjum samsvarandi k-mer \xc3\xbar [til] \xc3\xad [newTil].\n    # \xc3\x9eetta er gert til a\xc3\xb0 \xc3\xbea\xc3\xb0 komi fram ef k-mer tengist \xc3\xad fleiri en einn annan k-mer,\n    # \xc3\xbev\xc3\xad annars v\xc3\xa6ru allar lei\xc3\xb0irnar \xc3\xad netinu &quot;non-branching&quot;.\n    for j in range(0, len(fra)):\n        print(&quot;Seen+NewTil: &quot;, j)\n        if fra[j] in seen:\n            # setja samsvarandi til stak \xc3\xad newTil \xc3\xbear sem seen[i] er\n            newTil[seen.get(fra[j])] = til[j] + &quot;, &quot; + newTil[seen.get(fra[j])]\n        else:\n            seen[fra[j]] = j\n            newTil[j] = til[j]\n\n    newFrom = list(seen.keys())\n    newTil[:] = (value for value in newTil if value != \'\')\n\n    retList = makeList(len(seen))\n\n    # Til a\xc3\xb0 gera skilalistann s\xc3\xa6tan\n    for m in range(0, len(seen)):\n        print(&quot;Format &quot;, m)\n        retList[m] = newFrom[m] + &quot; -&gt; &quot; + newTil[m]\n\n    return (sorted(retList))\n\nprint(deBrujinMaker3000(dict))</code></pre></p> <p align="right"><span style="font-size: 60%">Add a code snippet to your website: <a href="https://www.paste.org" target="_blank">www.paste.org</a></span></p> </body> </html>'