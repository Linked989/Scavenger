b' <!DOCTYPE html> <html lang="en"> <head> <meta charset="utf-8"> <meta http-equiv="X-UA-Compatible" content="IE=edge"> <meta name="viewport" content="width=device-width, initial-scale=1">  <meta name="description" content="www.paste.org - allows users to paste snippets of text, usually samples of source code, for public viewing."> <meta name="author" content="An Australian"> <link rel="icon" href="/favicon.ico"> <title>Paste code - paste.org</title>  <link href="/assets/themes/bleh/css/github-highlight.css" rel="stylesheet"> <script src="/assets/themes/bleh/js/highlight.pack.js"></script> <script>hljs.initHighlightingOnLoad();</script> </head> <body> <p><pre><code class="cpp">void draw_Bresenham_line(int x0, int y0, int x1, int y1)\n{\n if(x1 - x0 == 0)\n  draw_Bresenham_line_infinito(x0, y0, x1, y1);\n else\n {\n  if(y1 - y0 == 0)\n   draw_Bresenham_line_igual0(x0, y0, x1, y1);\n  else\n  {\n   if(fabs((y1 - y0) / (x1 - x0)) &lt; 1)\n    draw_Bresenham_line_menor1(x0, y0, x1, y1);\n   else\n    draw_Bresenham_line_mayor1(x0, y0, x1, y1);\n  }\n }\n}\n\n//Rutina para rectas de Bresenham con m == 0\nvoid draw_Bresenham_line_igual0(int x0, int y0, int x1, int y1)\n{\n int x;\n\n for(x = x0; x &lt; x1; x++)\n {\n  glVertex2f(x,-y0+TAM_VENTANA_Y);\n  matriz[x][y0] = 1;\n    }\n}\n\n//Rutina para rectas de Bresenham con m = infinito\nvoid draw_Bresenham_line_infinito(int x0, int y0, int x1, int y1)\n{\n int y;\n\n for(y = y0; y &lt; y1; y++)\n {\n  glVertex2f(x0, -y+TAM_VENTANA_Y);\n  matriz[x0][y] = 1;\n    }\n}\n\n//Rutina para rectas de Bresenham con m == 1\nvoid draw_Bresenham_line_igual1(int x0, int y0, int x1, int y1)\n{\n int i;\n\n for(i = x0; i &lt; x1; i++)\n {\n  glVertex2f(i, -i+TAM_VENTANA_Y);\n  matriz[i][i] = 1;\n    }\n}\n\n//Rutina para rectas de Bresenham con m &lt; 1\nvoid draw_Bresenham_line_menor1(int x0, int y0, int x1, int y1)\n{\n int slope;\n int dx, dy, incE, incNSE, d, x, y;\n\n /* Reverse lines where x0 &gt; x1 */\n if (x0 &gt; x1) \n {\n  draw_Bresenham_line_menor1(x1, y1, x0, y0);\n  return;\n }\n\n dx = x1 - x0;\n dy = y1 - y0;\n\n /* Adjust y-increment for negatively sloped lines */\n if (dy &lt; 0) \n {\n  slope = -1;\n  dy = -dy;\n }\n else\n  slope = 1;\n\n /* Bresenham constants */\n incE = 2 * dy;\n incNSE = 2 * dy - 2 * dx;\n d = 2 * dy - dx;\n y = y0;\n\n for (x = x0; x &lt;= x1; x++) \n {\n  /* Painting a pixel */\n  glVertex2f(x,-y+TAM_VENTANA_Y);\n  matriz[x][y] = 1;\n  if (d &lt;= 0)\n   d += incE;\n  else \n  {\n   d += incNSE;\n   y += slope; \n  }\n }\n}\n\n//Rutina para rectas de Bresenham con m &gt; 1\nvoid draw_Bresenham_line_mayor1(int x0, int y0, int x1, int y1)\n{\n int slope;\n int dx, dy, incN, incNEO, d, x, y;\n\n /* Reverse lines where y0 &gt; y1 */\n if (y0 &gt; y1) \n {\n  draw_Bresenham_line_mayor1(x1, y1, x0, y0);\n  return;\n }\n\n dx = x1 - x0;\n dy = y1 - y0;\n\n /* Adjust y-increment for negatively sloped lines */\n if (dx &lt; 0) \n {\n  slope = -1;\n  dx = -dx;\n }\n else\n  slope = 1;\n\n /* Bresenham constants */\n incN = -2 * dx;\n incNEO = -2 * dx + 2 * dy;\n d = dy - 2* dx;\n x = x0;\n\n for (y = y0; y &lt;= y1; y++) \n {\n  /* Painting a pixel */\n  glVertex2f(x,-y+TAM_VENTANA_Y);\n  matriz[x][y] = 1;\n  if (d &lt;= 0)\n  {\n   d += incNEO;\n   x += slope;\n  }   \n  else \n   d += incN;\n }\n}</code></pre></p> <p align="right"><span style="font-size: 60%">Add a code snippet to your website: <a href="https://www.paste.org" target="_blank">www.paste.org</a></span></p> </body> </html>'