b' <!DOCTYPE html> <html lang="en"> <head> <meta charset="utf-8"> <meta http-equiv="X-UA-Compatible" content="IE=edge"> <meta name="viewport" content="width=device-width, initial-scale=1">  <meta name="description" content="www.paste.org - allows users to paste snippets of text, usually samples of source code, for public viewing."> <meta name="author" content="An Australian"> <link rel="icon" href="/favicon.ico"> <title>Paste code - paste.org</title>  <link href="/assets/themes/bleh/css/github-highlight.css" rel="stylesheet"> <script src="/assets/themes/bleh/js/highlight.pack.js"></script> <script>hljs.initHighlightingOnLoad();</script> </head> <body> <p><pre><code class="lua">-- Standard awesome library\nrequire(&quot;awful&quot;)\nrequire(&quot;awful.autofocus&quot;)\nrequire(&quot;awful.rules&quot;)\n-- Theme handling library\nrequire(&quot;beautiful&quot;)\n-- Notification library\nrequire(&quot;naughty&quot;)\n\n-- {{{ Error handling\n-- Check if awesome encountered an error during startup and fell back to\n-- another config (This code will only ever execute for the fallback config)\nif awesome.startup_errors then\n    naughty.notify({ preset = naughty.config.presets.critical,\n                     title = &quot;Oops, there were errors during startup!&quot;,\n                     text = awesome.startup_errors })\nend\n\n-- Handle runtime errors after startup\ndo\n    local in_error = false\n    awesome.add_signal(&quot;debug::error&quot;, function (err)\n        -- Make sure we don\'t go into an endless error loop\n        if in_error then return end\n        in_error = true\n\n        naughty.notify({ preset = naughty.config.presets.critical,\n                         title = &quot;An error occurred&quot;,\n                         text = err })\n        in_error = false\n    end)\nend\n-- }}}\n\n-- {{{ Variable definitions\n-- Themes define colours, icons, and wallpapers\nbeautiful.init(&quot;/usr/share/awesome/themes/default/theme.lua&quot;)\n\n-- This is used later as the default terminal and editor to run.\nterminal = &quot;terminal&quot;\neditor = os.getenv(&quot;EDITOR&quot;) or &quot;nano&quot;\neditor_cmd = terminal .. &quot; -e &quot; .. editor\n\n-- Default modkey.\n-- Usually, Mod4 is the key with a logo between Control and Alt.\n-- If you do not like this or do not have such a key,\n-- I suggest you to remap Mod4 to another key using xmodmap or other tools.\n-- However, you can use another modifier like Mod1, but it may interact with others.\nmodkey = &quot;Mod4&quot;\n\n-- Table of layouts to cover with awful.layout.inc, order matters.\nlayouts =\n{\n    awful.layout.suit.floating,\n    awful.layout.suit.tile,\n    awful.layout.suit.tile.left,\n    awful.layout.suit.tile.bottom,\n    awful.layout.suit.tile.top,\n    awful.layout.suit.fair,\n    awful.layout.suit.spiral,\n    awful.layout.suit.spiral.dwindle,\n    \n}\n-- }}}\n\n-- {{{ Tags\n-- Define a tag table which hold all screen tags.\ntags = {}\nfor s = 1, screen.count() do\n    -- Each screen has its own tag table.\n    tags[s] = awful.tag({ 1, 2, 3, 4, 5, 6, 7, 8, 9 }, s, layouts[1])\nend\n-- }}}\n\n-- {{{ Menu\n-- Create a laucher widget and a main menu\nmyawesomemenu = {\n   { &quot;manual&quot;, &quot;terminal --command man awesome&quot; },\n   { &quot;edit config&quot;, &quot;terminal --command nano ~/.config/awesome/rc.lua&quot;  },\n   { &quot;restart&quot;, awesome.restart },\n   { &quot;quit&quot;, awesome.quit }\n}\n\nmymmmenu = {\n   { &quot;thunar&quot;, &quot;thunar&quot; },\n   { &quot;vlc&quot;, &quot;vlc&quot; },\n   { &quot;mpd&quot;, &quot;mpd ~/.mpd.conf &amp;&amp; mpc load musik &amp;&amp; mpc random on&quot; },\n   { &quot;alsamixer&quot;, &quot;terminal --command alsamixer&quot; }\n}\n\nmywebmenu = {\n   { &quot;chromium&quot;, &quot;chromium&quot; },\n   { &quot;pidgin&quot;, &quot;pidgin&quot; },\n   { &quot;xchat&quot;, &quot;xchat&quot; }\n}\n\n\nmymainmenu = awful.menu({ items = { { &quot;awesome&quot;, myawesomemenu, beautiful.awesome_icon },\n                                    { &quot;terminal&quot;, terminal },\n        { &quot;media&quot;, mymmmenu },\n        { &quot;web&quot;, mywebmenu }\n                                  }\n                        })\n\nmylauncher = awful.widget.launcher({ image = image(beautiful.awesome_icon),\n                                     menu = mymainmenu })\n-- }}}\n\n-- {{{ Wibox\n-- Create a textclock widget\nmytextclock = awful.widget.textclock({ align = &quot;right&quot; })\n\n-- Create a systray\nmysystray = widget({ type = &quot;systray&quot; })\n\n-- Create a wibox for each screen and add it\nmywibox = {}\nmypromptbox = {}\nmylayoutbox = {}\nmytaglist = {}\nmytaglist.buttons = awful.util.table.join(\n                    awful.button({ }, 1, awful.tag.viewonly),\n                    awful.button({ modkey }, 1, awful.client.movetotag),\n                    awful.button({ }, 3, awful.tag.viewtoggle),\n                    awful.button({ modkey }, 3, awful.client.toggletag),\n                    awful.button({ }, 4, awful.tag.viewnext),\n                    awful.button({ }, 5, awful.tag.viewprev)\n                    )\nmytasklist = {}\nmytasklist.buttons = awful.util.table.join(\n                     awful.button({ }, 1, function (c)\n                                              if c == client.focus then\n                                                  c.minimized = true\n                                              else\n                                                  if not c:isvisible() then\n                                                      awful.tag.viewonly(c:tags()[1])\n                                                  end\n                                                  -- This will also un-minimize\n                                                  -- the client, if needed\n                                                  client.focus = c\n                                                  c:raise()\n                                              end\n                                          end),\n                     awful.button({ }, 3, function ()\n                                              if instance then\n                                                  instance:hide()\n                                                  instance = nil\n                                              else\n                                                  instance = awful.menu.clients({ width=250 })\n                                              end\n                                          end),\n                     awful.button({ }, 4, function ()\n                                              awful.client.focus.byidx(1)\n                                              if client.focus then client.focus:raise() end\n                                          end),\n                     awful.button({ }, 5, function ()\n                                              awful.client.focus.byidx(-1)\n                                              if client.focus then client.focus:raise() end\n                                          end))\n\nfor s = 1, screen.count() do\n    -- Create a promptbox for each screen\n    mypromptbox[s] = awful.widget.prompt({ layout = awful.widget.layout.horizontal.leftright })\n    -- Create an imagebox widget which will contains an icon indicating which layout we\'re using.\n    -- We need one layoutbox per screen.\n    mylayoutbox[s] = awful.widget.layoutbox(s)\n    mylayoutbox[s]:buttons(awful.util.table.join(\n                           awful.button({ }, 1, function () awful.layout.inc(layouts, 1) end),\n                           awful.button({ }, 3, function () awful.layout.inc(layouts, -1) end),\n                           awful.button({ }, 4, function () awful.layout.inc(layouts, 1) end),\n                           awful.button({ }, 5, function () awful.layout.inc(layouts, -1) end)))\n    -- Create a taglist widget\n    mytaglist[s] = awful.widget.taglist(s, awful.widget.taglist.label.all, mytaglist.buttons)\n\n    -- Create a tasklist widget\n    mytasklist[s] = awful.widget.tasklist(function(c)\n                                              return awful.widget.tasklist.label.currenttags(c, s)\n                                          end, mytasklist.buttons)\n\n    -- Create the wibox\n    mywibox[s] = awful.wibox({ position = &quot;top&quot;, screen = s })\n    -- Add widgets to the wibox - order matters\n    mywibox[s].widgets = {\n        {\n            mylauncher,\n            mytaglist[s],\n            mypromptbox[s],\n            layout = awful.widget.layout.horizontal.leftright\n        },\n        mylayoutbox[s],\n        mytextclock,\n        s == 1 and mysystray or nil,\n        mytasklist[s],\n        layout = awful.widget.layout.horizontal.rightleft\n    }\nend\n-- }}}\n\n-- {{{ Mouse bindings\nroot.buttons(awful.util.table.join(\n    awful.button({ }, 3, function () mymainmenu:toggle() end),\n    awful.button({ }, 4, awful.tag.viewnext),\n    awful.button({ }, 5, awful.tag.viewprev)\n))\n-- }}}\n\n-- {{{ Key bindings\nglobalkeys = awful.util.table.join(\n    awful.key({ modkey,           }, &quot;Escape&quot;, awful.tag.history.restore),\n    \n    awful.key({ modkey,           }, &quot;j&quot;,\n        function ()\n            awful.client.focus.byidx( 1)\n            if client.focus then client.focus:raise() end\n        end),\n    awful.key({ modkey,           }, &quot;k&quot;,\n        function ()\n            awful.client.focus.byidx(-1)\n            if client.focus then client.focus:raise() end\n        end),\n    awful.key({ modkey,           }, &quot;w&quot;, function () mymainmenu:show({keygrabber=true}) end),\n\n    -- Layout manipulation\n    awful.key({ modkey, &quot;Shift&quot;   }, &quot;j&quot;, function () awful.client.swap.byidx(  1)    end),\n    awful.key({ modkey, &quot;Shift&quot;   }, &quot;k&quot;, function () awful.client.swap.byidx( -1)    end),\n    awful.key({ modkey, &quot;Control&quot; }, &quot;j&quot;, function () awful.screen.focus_relative( 1) end),\n    awful.key({ modkey, &quot;Control&quot; }, &quot;k&quot;, function () awful.screen.focus_relative(-1) end),\n    awful.key({ modkey,           }, &quot;u&quot;, awful.client.urgent.jumpto),\n    awful.key({ modkey,           }, &quot;Tab&quot;,\n        function ()\n            awful.client.focus.history.previous()\n            if client.focus then\n                client.focus:raise()\n            end\n        end),\n\n    -- Standard program\n    awful.key({ modkey,           }, &quot;Return&quot;, function () awful.util.spawn(terminal) end),\n    awful.key({ modkey, &quot;Control&quot; }, &quot;r&quot;, awesome.restart),\n    awful.key({ modkey, &quot;Shift&quot;   }, &quot;q&quot;, awesome.quit),\n\n    awful.key({ modkey,           }, &quot;l&quot;,     function () awful.tag.incmwfact( 0.05)    end),\n    awful.key({ modkey,           }, &quot;h&quot;,     function () awful.tag.incmwfact(-0.05)    end),\n    awful.key({ modkey, &quot;Shift&quot;   }, &quot;h&quot;,     function () awful.tag.incnmaster( 1)      end),\n    awful.key({ modkey, &quot;Shift&quot;   }, &quot;l&quot;,     function () awful.tag.incnmaster(-1)      end),\n    awful.key({ modkey, &quot;Control&quot; }, &quot;h&quot;,     function () awful.tag.incncol( 1)         end),\n    awful.key({ modkey, &quot;Control&quot; }, &quot;l&quot;,     function () awful.tag.incncol(-1)         end),\n    awful.key({ modkey,           }, &quot;space&quot;, function () awful.layout.inc(layouts,  1) end),\n    awful.key({ modkey, &quot;Shift&quot;   }, &quot;space&quot;, function () awful.layout.inc(layouts, -1) end),\n\n    awful.key({ modkey, &quot;Control&quot; }, &quot;n&quot;, awful.client.restore),\n\n    -- Prompt\n    awful.key({ modkey },            &quot;r&quot;,     function () mypromptbox[mouse.screen]:run() end),\n\n    awful.key({ modkey }, &quot;x&quot;,\n              function ()\n                  awful.prompt.run({ prompt = &quot;Run Lua code: &quot; },\n                  mypromptbox[mouse.screen].widget,\n                  awful.util.eval, nil,\n                  awful.util.getdir(&quot;cache&quot;) .. &quot;/history_eval&quot;)\n              end)\n)\n\nclientkeys = awful.util.table.join(\n    awful.key({ modkey,           }, &quot;f&quot;,      function (c) c.fullscreen = not c.fullscreen  end),\n    awful.key({ modkey, &quot;Shift&quot;   }, &quot;c&quot;,      function (c) c:kill()                         end),\n    awful.key({ modkey, &quot;Control&quot; }, &quot;space&quot;,  awful.client.floating.toggle                     ),\n    awful.key({ modkey, &quot;Control&quot; }, &quot;Return&quot;, function (c) c:swap(awful.client.getmaster()) end),\n    awful.key({ modkey,           }, &quot;o&quot;,      awful.client.movetoscreen                        ),\n    awful.key({ modkey, &quot;Shift&quot;   }, &quot;r&quot;,      function (c) c:redraw()                       end),\n    awful.key({ modkey,           }, &quot;t&quot;,      function (c) c.ontop = not c.ontop            end),\n    awful.key({ modkey,           }, &quot;n&quot;,\n        function (c)\n            -- The client currently has the input focus, so it cannot be\n            -- minimized, since minimized clients can\'t have the focus.\n            c.minimized = true\n        end),\n    awful.key({ modkey,           }, &quot;m&quot;,\n        function (c)\n            c.maximized_horizontal = not c.maximized_horizontal\n            c.maximized_vertical   = not c.maximized_vertical\n        end)\n)\n\n-- Compute the maximum number of digit we need, limited to 9\nkeynumber = 0\nfor s = 1, screen.count() do\n   keynumber = math.min(9, math.max(#tags[s], keynumber));\nend\n\n-- Bind all key numbers to tags.\n-- Be careful: we use keycodes to make it works on any keyboard layout.\n-- This should map on the top row of your keyboard, usually 1 to 9.\nfor i = 1, keynumber do\n    globalkeys = awful.util.table.join(globalkeys,\n        awful.key({ modkey }, &quot;#&quot; .. i + 9,\n                  function ()\n                        local screen = mouse.screen\n                        if tags[screen][i] then\n                            awful.tag.viewonly(tags[screen][i])\n                        end\n                  end),\n        awful.key({ modkey, &quot;Control&quot; }, &quot;#&quot; .. i + 9,\n                  function ()\n                      local screen = mouse.screen\n                      if tags[screen][i] then\n                          awful.tag.viewtoggle(tags[screen][i])\n                      end\n                  end),\n        awful.key({ modkey, &quot;Shift&quot; }, &quot;#&quot; .. i + 9,\n                  function ()\n                      if client.focus and tags[client.focus.screen][i] then\n                          awful.client.movetotag(tags[client.focus.screen][i])\n                      end\n                  end),\n        awful.key({ modkey, &quot;Control&quot;, &quot;Shift&quot; }, &quot;#&quot; .. i + 9,\n                  function ()\n                      if client.focus and tags[client.focus.screen][i] then\n                          awful.client.toggletag(tags[client.focus.screen][i])\n                      end\n                  end))\nend\n\nclientbuttons = awful.util.table.join(\n    awful.button({ }, 1, function (c) client.focus = c; c:raise() end),\n    awful.button({ modkey }, 1, awful.mouse.client.move),\n    awful.button({ modkey }, 3, awful.mouse.client.resize))\n\n-- Set keys\nroot.keys(globalkeys)\n-- }}}\n\n-- {{{ Rules\nawful.rules.rules = {\n    -- All clients will match this rule.\n    { rule = { },\n      properties = { border_width = beautiful.border_width,\n                     border_color = beautiful.border_normal,\n                     focus = true,\n                     keys = clientkeys,\n                     buttons = clientbuttons } },\n    { rule = { class = &quot;MPlayer&quot; },\n      properties = { floating = true } },\n    { rule = { class = &quot;pinentry&quot; },\n      properties = { floating = true } },\n    { rule = { class = &quot;gimp&quot; },\n      properties = { floating = true } },\n    -- Set Firefox to always map on tags number 2 of screen 1.\n    -- { rule = { class = &quot;Firefox&quot; },\n    --   properties = { tag = tags[1][2] } },\n}\n-- }}}\n\n-- {{{ Signals\n-- Signal function to execute when a new client appears.\nclient.add_signal(&quot;manage&quot;, function (c, startup)\n    -- Add a titlebar\n    -- awful.titlebar.add(c, { modkey = modkey })\n\n    -- Enable sloppy focus\n    c:add_signal(&quot;mouse::enter&quot;, function(c)\n        if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier\n            and awful.client.focus.filter(c) then\n            client.focus = c\n        end\n    end)\n\n    if not startup then\n        -- Set the windows at the slave,\n        -- i.e. put it at the end of others instead of setting it master.\n        -- awful.client.setslave(c)\n\n        -- Put windows in a smart way, only if they does not set an initial position.\n        if not c.size_hints.user_position and not c.size_hints.program_position then\n            awful.placement.no_overlap(c)\n            awful.placement.no_offscreen(c)\n        end\n    end\nend)\n\nclient.add_signal(&quot;focus&quot;, function(c) c.border_color = beautiful.border_focus end)\nclient.add_signal(&quot;unfocus&quot;, function(c) c.border_color = beautiful.border_normal end)\n-- }}}\n\n-- Autostart programs\nawful.util.spawn_with_shell(&quot;mpd ~/.mpd/.mpdconf &amp;&amp; mpc load musik &amp;&amp; mpc random&quot;)\n\n-- None awesome-related keybindings\n-- globalkeys = awful.util.table.join( awful.key({ &quot;Mod1&quot;, } &quot;Left&quot;, function() exec&amp;#40;&quot;mpc prev&quot;&amp;#41; end ))\n-- globalkeys = awful.util.table.join( awful.key({ &quot;Mod1&quot;, } &quot;Left&quot;, function() exec&amp;#40;&quot;mpc prev&quot;&amp;#41;))\nglobalkeys = awful.util.table.join( awful.key({ &quot;Mod1&quot;, }, &quot;Left&quot;, function() exec&amp;#40;&quot;mpc prev&quot;&amp;#41; end))\n</code></pre></p> <p align="right"><span style="font-size: 60%">Add a code snippet to your website: <a href="https://www.paste.org" target="_blank">www.paste.org</a></span></p> </body> </html>'