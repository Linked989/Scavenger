b' <!DOCTYPE html> <html lang="en"> <head> <meta charset="utf-8"> <meta http-equiv="X-UA-Compatible" content="IE=edge"> <meta name="viewport" content="width=device-width, initial-scale=1">  <meta name="description" content="www.paste.org - allows users to paste snippets of text, usually samples of source code, for public viewing."> <meta name="author" content="An Australian"> <link rel="icon" href="/favicon.ico"> <title>Paste code - paste.org</title>  <link href="/assets/themes/bleh/css/github-highlight.css" rel="stylesheet"> <script src="/assets/themes/bleh/js/highlight.pack.js"></script> <script>hljs.initHighlightingOnLoad();</script> </head> <body> <p><pre><code class="cpp">    #include &lt;glut.h&gt;\n     \n    #define ESCAPE 27\n    #define SPACEBAR 32\n     \n     \n    int windowHandle;\n    int win;\n int turn;\n GLfloat toy1x;\n GLfloat toy1y;\n GLfloat toy1z;\n GLfloat toy2x;\n GLfloat toy2y;\n GLfloat toy2z;\n GLfloat toy3x;\n GLfloat toy3y;\n GLfloat toy3z;\n    GLfloat maincranex;\n    GLfloat maincraney;\n    GLfloat maincranez;\n    GLfloat cranex;\n    GLfloat craney;\n    GLfloat cranez;\n    GLfloat rotatey;\n    GLfloat rotatedeg;\n    GLfloat Gatey;\n    GLfloat Zoom;\n     \n    /* The function called when our window is resized (which shouldn\'t happen, because we\'re fullscreen) */\n     \n    void resizeScene(int width, int height)\n    {\n    // Prevent A Divide By Zero If The Window Is Too Small\n     \n    if(height == 0)\n    {\n    height=1;\n    }\n     \n    // Reset The Current Viewport And Perspective Transformation\n     \n    glViewport(0, 0, width, height);\n     \n    glMatrixMode(GL_PROJECTION);\n    glLoadIdentity();\n     \n    gluPerspective(45.0f, (GLfloat) width / (GLfloat) height, 0.1f, 100.0f);\n    glMatrixMode(GL_MODELVIEW);\n    }\n     \n    //============================================DRAWING=================================================\n     \n    void craneleftclaw()\n    {\n     \n    //*~~~~~~~~~BOX THING~~~~~~~~~*\n    //back\n    glBegin(GL_QUADS);\n    glColor3f(0.3,0,0);\n    glVertex3f(-2,-12,-5);\n    glVertex3f(-1,-12,-5);\n    glVertex3f(-1,-16,-5);\n    glVertex3f(-2,-16,-5);\n    glEnd();\n    //front\n    glBegin(GL_QUADS);\n    glColor3f(0.3,0,0);\n    glVertex3f(-2,-12,0.0);\n    glVertex3f(-1,-12,0);\n    glVertex3f(-1,-16,0);\n    glVertex3f(-2,-16,0);\n    glEnd();\n     \n    //*~~~~~~~~~~~~~~~~LOWER TRIANGLE~~~~~~~~~~~~~~~~~~~~~~*\n     \n     \n    //back\n    glBegin(GL_TRIANGLES);\n    glColor3f(0,0.6,0);\n    glVertex3f(-6,-12,-5);\n    glVertex3f(-2,-12,-5);\n    glVertex3f(-2,-16,-5);\n    glEnd();\n    //front\n    glBegin(GL_TRIANGLES);\n    glColor3f(0.3,0.6,0);\n    glVertex3f(-6,-12,0);\n    glVertex3f(-2,-12,0);\n    glVertex3f(-2,-16,0);\n    glEnd();\n     \n    //*~~~~~~~~~~~~~~~~UPPER TRIANGLE~~~~~~~~~~~~~~~~~~~~~~*\n     \n    //right\n    glBegin(GL_QUADS);\n    glColor3f(0.7,0.6,0.6);\n    glVertex3f(-2,-8,0);\n    glVertex3f(-2,-8,-5);\n    glVertex3f(-2,-12,-5);\n    glVertex3f(-2,-12,0);\n    glEnd();\n     \n    //back\n    glBegin(GL_TRIANGLES);\n    glColor3f(0,1,0);\n    glVertex3f(-2,-8,-5);\n    glVertex3f(-2,-12,-5);\n    glVertex3f(-6,-12,-5);\n    glEnd();\n     \n    //left\n    glBegin(GL_QUADS);\n    glColor3f(0.7,0.6,0.4);\n    glVertex3f(-2,-8,0);\n    glVertex3f(-2,-8,-5);\n    glColor3f(0.6,0.3,0);\n    glVertex3f(-6,-12,-5);\n    glColor3f(0.6,0.3,0);\n    glVertex3f(-6,-12,0);\n    glEnd();\n     \n    //front\n    glBegin(GL_TRIANGLES);\n    glColor3f(0.7,0.6,0.4);\n    glVertex3f(-2,-8,0);\n    glColor3f(0.6,0.3,0);\n    glVertex3f(-2,-12,0);\n    glColor3f(0.3,0.0,0);\n    glVertex3f(-6,-12,0);\n    glEnd();\n     \n     \n    }\n    void cranerightclaw()\n    {\n    //*~~~~~~~~~~~~~~~~~~~~BOX THING~~~~~~~~~~~~~~~~~~~~~~~*\n    //back\n    glBegin(GL_QUADS);\n    glColor3f(0.3,0,0);\n    glVertex3f(2,-12,-5);\n    glVertex3f(1,-12,-5);\n    glVertex3f(1,-16,-5);\n    glVertex3f(2,-16,-5);\n    glEnd();\n    //front\n    glBegin(GL_QUADS);\n    glColor3f(0.3,0,0);\n    glVertex3f(2,-12,0.0);\n    glVertex3f(1,-12,0);\n    glVertex3f(1,-16,0);\n    glVertex3f(2,-16,0);\n    glEnd();\n    //*~~~~~~~~~~~~~~~~~~~~LOWER TRIANGLE~~~~~~~~~~~~~~~~~~~~*\n     \n    //back\n    glBegin(GL_TRIANGLES);\n    glColor3f(0,0.6,0);\n    glVertex3f(6,-12,-5);\n    glVertex3f(2,-12,-5);\n    glVertex3f(2,-16,-5);\n    glEnd();\n    //front\n    glBegin(GL_TRIANGLES);\n    glColor3f(0.3,0.6,0);\n    glVertex3f(6,-12,0);\n    glVertex3f(2,-12,0);\n    glVertex3f(2,-16,0);\n    glEnd();\n    //*~~~~~~~~~~~~~~~~~~~~~~~~~UPPER TRIANGLE~~~~~~~~~~~~~~~~~~~~~~~~~~*\n     \n    //right\n    glBegin(GL_QUADS);\n    glColor3f(0.7,0.6,0.6);\n    glVertex3f(2,-8,0);\n    glVertex3f(2,-8,-5);\n    glVertex3f(2,-12,-5);\n    glVertex3f(2,-12,0);\n    glEnd();\n    //back\n    glBegin(GL_TRIANGLES);\n    glColor3f(0,1,0);\n    glVertex3f(2,-8,-5);\n    glVertex3f(2,-12,-5);\n    glVertex3f(6,-12,-5);\n    glEnd();\n     \n    //left\n    glBegin(GL_QUADS);\n    glColor3f(0.7,0.6,0.4);\n    glVertex3f(2,-8,0);\n    glVertex3f(2,-8,-5);\n    glColor3f(0.6,0.3,0);\n    glVertex3f(6,-12,-5);\n    glColor3f(0.6,0.3,0);\n    glVertex3f(6,-12,0);\n    glEnd();\n    //front\n    glBegin(GL_TRIANGLES);\n    glColor3f(0.7,0.6,0.4);\n    glVertex3f(2,-8,0);\n    glColor3f(0.6,0.3,0);\n    glVertex3f(2,-12,0);\n    glColor3f(0.3,0.0,0);\n    glVertex3f(6,-12,0);\n    glEnd();\n    }\n     \n     \n    //*~~~~~~~~~~~~~~~~~~~~~MAIN CRANE BODY~~~~~~~~~~~~~*\n    void cranebody()\n    {\n     \n    //back\n    glBegin(GL_QUADS);\n    glColor3f(0,1,1);\n    glVertex3f(-2.0f, 0.0f, -5.0f);\n    glVertex3f(2.0f, 0.0f, -5.0f);\n    glVertex3f(2.0f, -8.0f, -5.0f);\n    glVertex3f(-2.0f, -8.0f, -5.0f);\n    glEnd();\n     \n    //lower\n    glBegin(GL_QUADS);\n    glColor3f(0,0,1);\n    glVertex3f(-2,-8,0);\n    glVertex3f(2,-8,0);\n    glVertex3f(2,-8,-5);\n    glVertex3f(-2,-8,-5);\n    glEnd();\n     \n    //right\n    glBegin(GL_QUADS);\n    glColor3f(1,1,0);\n    glVertex3f(2,0,0);\n    glVertex3f(2,-8,0);\n    glVertex3f(2,-8,-5);\n    glVertex3f(2,0,-5);\n    glEnd();\n     \n    //left\n    glBegin(GL_QUADS);\n    glColor3f(0.7,0.6,0.4);\n    glVertex3f(-2,0,0);\n    glVertex3f(-2,-8,0);\n    glColor3f(1,1,1);\n    glVertex3f(-2,-8,-5);\n    glColor3f(0.7,0.6,0.4);\n    glVertex3f(-2,0,-5);\n    glEnd();\n     \n     \n    //upper\n    glBegin(GL_QUADS);\n    glColor3f(0.7,0.6,0.4);\n    glVertex3f(-2,0,0);\n    glVertex3f(-2,0,-5);\n    glColor3f(1,1,1);\n    glVertex3f(2,0,-5);\n    glVertex3f(2,0,0);\n    glEnd();\n     \n     \n    //front\n    glBegin(GL_QUADS);\n    glColor3f(0.7,0.6,0.4);\n    glVertex3f(-2.0f, 0.0f, 0.0f);\n    glVertex3f(2.0f, 0.0f, 0.0f);\n    glVertex3f(2.0f, -8.0f, 0.0f);\n    glColor3f(1,1,1);\n    glVertex3f(-2.0f, -8.0f, 0.0f);\n    glEnd();\n     \n    }\n     \n    void base()\n    {\n    glPushMatrix();\n    glTranslatef(0,-25,0);\n    glBegin(GL_LINES);\n    glVertex3f(15,-15,-15);\n    glVertex3f(-15,-15,-15);\n    glVertex3f(-15,-15,15);\n    glVertex3f(15,-15,15);\n    glEnd();\n    glPopMatrix();\n    }\n     \n     \n    //=======================================ANIMATIONS,COMMANDS,CHECKS======================================\n    //Makes the toy &quot;falldown&quot;\n    void ToyFallingDown()\n    {\n    if (win==1)\n         toy1y--;\n    else if (win==2)\n         toy2y--;\n    else if (win==3)\n         toy3y--;\n    }\n     \n    //Makes Crane GO Down\n    void CraneGoDown()\n    {\n    do\n  {\n         maincraney--;\n         }\n   while (maincraney!=0);\n    }\n     \n    //Makes Crane Go Up\n    void CraneGoUp()\n    {\n    do\n  {\n        maincraney++;\n        }\n while (maincraney!=5);\n    }\n     \n    //Go back to default place...\n    void CraneGoBack()\n    {\n     while (maincranex!=-5)\n         {\n         maincranex--;\n         }\n     while (maincranez!=5)\n         {\n         maincranez++;\n         }\n    }\n     \n     \n    void Check1()\n    {\n     if (toy1x == cranex &amp;&amp; toy1z == cranez)\n         {\n         toy1x=cranex;\n         toy1y=craney;\n         toy1z=cranez;\n         win=1;\n         }\n     else if (toy2x == cranex &amp;&amp; toy2z == cranez)\n         {\n         toy2x=cranex;\n         toy2y=craney;\n         toy2z=cranez;\n         win=2;\n         }\n     else if (toy3x == cranex &amp;&amp; toy3z == cranez)\n         {\n         toy3x=cranex;\n         toy3y=craney;\n         toy3z=cranez;\n         win=3;\n         }\n    }\n     \n     \n    void showScene()\n    {\n     \n    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n    glLoadIdentity();\n     \n     \n     \n    // Write your 3D stuff below this line!\n    glPushMatrix();\n    glTranslatef(0,0,-40);\n    base();\n    glPopMatrix();\n     \n    glTranslatef(0,0,-40);\n    glRotatef(45,1,1,0);\n     \n    glTranslatef(maincranex,maincraney,maincranez);\n    cranerightclaw();\n cranebody();\n    craneleftclaw();\n    \n     \n    /*\n     \n    don\'t wait!\n    start processing buffered OpenGL routines\n     \n    */\n     \n    glFlush();\n     \n    // Need to swap buffer to show latest render\n     \n    glutSwapBuffers();\n    }\n     \n    /*\n     \n    Prepare everything for viewing\n     \n    */\n     \n    void initMyComponents(int width, int height)\n    {\n    GLfloat aspectRatio;\n     \n    // select clearing (background) color\n     \n    glClearColor(0.0, 0.0, 0.0, 0.0);\n     \n    // initialize viewing values\n     \n    // Clear both screen and depth buffer\n     \n    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n     \n    glMatrixMode(GL_PROJECTION);\n     \n    // Reset The Projection Matrix\n     \n    glLoadIdentity();\n     \n    // No need for this advanced clipping function from the red book.\n     \n    //glOrtho(0.0, 1.0, 0.0, 1.0, -1.0, 1.0);\n     \n    // Calculate The Aspect Ratio Of The Window\n     \n    aspectRatio = (GLfloat) width / (GLfloat) height;\n    gluPerspective(45.0f, aspectRatio, 0.1f, 100.0f);\n    glMatrixMode(GL_MODELVIEW);\n    }\n     \n    void keyPressed(unsigned char key, int x, int y)\n    {\n    /* avoid thrashing this procedure. Uncomment the line if using gcc */\n     \n    //usleep(100);\n     \n    /* If escape is pressed, kill everything. */\n     \n    if (key == ESCAPE)\n    {\n    /* shut down our window */\n     \n    glutDestroyWindow(windowHandle);\n     \n    /* exit the program...normal termination. */\n    }\n     \n     \n    do\n    {\n    //MOVES THE CRANE\n    //x-axis\n    if (key==\'d\')\n    {\n    maincranex-=1;\n    cranex-=1;\n    turn-=1;\n    }\n    if (key==\'a\')\n    {\n    maincranex+=1;\n    cranex+=1;\n    turn-=1;\n    }\n     \n    //Z-axis\n    if (key == \'w\')\n    {\n    maincranez+=1;\n    cranez+=1;\n    turn-=1;\n    }\n    if(key == \'s\')\n    {\n    maincranez-=1;\n    cranez-=1;\n    turn-=1;\n    }\n     \n    //Drop\n    if (key == SPACEBAR)\n    {\n    turn=0;\n    }\n     \n    }\n    while (turn!=0);\n     \n     \n    if (key == \'m\')\n    {\n    rotatey+=1;\n    }\n    if (key == \'n\')\n    {\n    rotatey-=1;\n    }\n    if (key==\'j\')\n    {\n    rotatedeg+=10;\n    }\n    if (key==\'k\')\n    {\n    rotatedeg-=10;\n    }\n    if(key==\',\')\n    {\n    Gatey+=1;\n    }\n    if(key==\'.\')\n    {\n    Gatey-=1;\n    }\n    if(key==\'[\')\n    {\n    Zoom-=10;\n    }\n    if(key==\']\')\n    {\n    Zoom+=10;\n    }\n    }\n     \n    /*\n     \n    Declare initial window size, position, and display mode\n    (single buffer and RGBA). Open window with &quot;hello&quot;\n    in its title bar. Call initialization routines.\n    Register callback function to display graphics.\n    Enter main loop and process events.\n     \n    */\n     \n    int main(int argc, char** argv)\n    {\n    glutInit(&amp;argc;, argv);\n    rotatey=1;\n    rotatedeg=45;\n     \n    //Declaration of Values\n    maincranex=-5;\n    maincraney=5;\n    maincranez=5;\n    cranex;\n    craney;\n    cranez;\n    turn=10;\n    win=0;\n     \n    // Do double-buffer for smoother rendering and animation.\n     \n    glutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE | GLUT_ALPHA | GLUT_DEPTH);\n    glutInitWindowSize(640, 480);\n    //glutInitWindowPosition(100, 100);\n    glutInitWindowPosition(0, 0);\n    windowHandle = glutCreateWindow(&quot;Your OpenGL Program&quot;);\n     \n    initMyComponents(640, 480);\n     \n    /* Register the function called when the keyboard is pressed. */\n     \n    glutKeyboardFunc(&amp;keyPressed;);\n     \n    // Show in full screen. Can be used later by uncommenting.\n     \n    //glutFullScreen();\n     \n    // Draw the scenery\n     \n    glutDisplayFunc(&amp;showScene;);\n    glutReshapeFunc(&amp;resizeScene;);\n    glutIdleFunc(&amp;showScene;);\n    glutMainLoop();\n     \n    if (turn==0)\n    {\n     CraneGoDown();\n     Check1();\n     CraneGoUp();\n     CraneGoBack();\n     ToyFallingDown();\n    }\n     \n     \n    return 0;\n    }\n</code></pre></p> <p align="right"><span style="font-size: 60%">Add a code snippet to your website: <a href="https://www.paste.org" target="_blank">www.paste.org</a></span></p> </body> </html>'