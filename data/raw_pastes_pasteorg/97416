b' <!DOCTYPE html> <html lang="en"> <head> <meta charset="utf-8"> <meta http-equiv="X-UA-Compatible" content="IE=edge"> <meta name="viewport" content="width=device-width, initial-scale=1">  <meta name="description" content="www.paste.org - allows users to paste snippets of text, usually samples of source code, for public viewing."> <meta name="author" content="An Australian"> <link rel="icon" href="/favicon.ico"> <title>Paste code - paste.org</title>  <link href="/assets/themes/bleh/css/github-highlight.css" rel="stylesheet"> <script src="/assets/themes/bleh/js/highlight.pack.js"></script> <script>hljs.initHighlightingOnLoad();</script> </head> <body> <p><pre><code class="javascript">const http = require(&amp;#039;http&amp;#039;)\r\nconst https = require(&amp;#039;https&amp;#039;)\r\nconst fastify = require(&amp;#039;fastify&amp;#039;)()\r\nconst EventEmitter = require(&amp;#039;events&amp;#039;);\r\n\r\nclass DblAPI extends EventEmitter{\r\n  constructor(token, options, client){\r\n    super()\r\n    if(!token){\r\n      throw new Error(&quot;Missing required parameter: token.&quot;)\r\n    }\r\n    this.token = token\r\n\r\n    if(isLib(&amp;#039;discord.js&amp;#039;, options)){\r\n      client = options\r\n      options = {}\r\n    }\r\n    this.options = options || {}\r\n\r\n    if(client &amp;&amp; isLib(&amp;#039;discord.js&amp;#039;, client)){\r\n      this.client = client\r\n      if(!this.options.delay) this.options.delay = 1800000\r\n      if(this.options.delay &lt; 900000) throw new Error(&quot;Delay can not be less than 15 minutes (900000 ms).&quot;)\r\n      this.postStats()\r\n      setInterval(() =&gt; {\r\n        this.postStats()        \r\n      }, this.options.delay)\r\n    }else if(client){\r\n      throw new Error(&quot;Client provided is not a discord.js client.&quot;)\r\n    }\r\n    \r\n    let {\r\n      port,\r\n      auth,\r\n      path\r\n    } = this.options\r\n    \r\n    this.port = port\r\n    this.auth = auth\r\n    path = path || &quot;vote&quot;\r\n    this.path = path\r\n    \r\n    if(port){\r\n      if(!auth) throw new Error(&quot;No auth provided with port.&quot;)\r\n      fastify.post(`/${path}/`, (req, res) =&gt; this.onVote(req, res))\r\n      fastify.listen(port, (err, address) =&gt; {\r\n        if(err) throw new Error(`Error starting server: ${err}`)\r\n        console.info(`Dbl webhook listening at ${address}/${path}`)\r\n      })\r\n    }\r\n    this.emit(&amp;#039;ready&amp;#039;)\r\n  }\r\n\r\n  request(opts){\r\n    return new Promise((resolve, reject) =&gt; {\r\n      let data = &amp;#039;&amp;#039;;\r\n      let request = https.request(opts, (res) =&gt; {\r\n        if(res.statusCode == 401) throw new Error(&quot;Unauthorized, invalid DBL token.&quot;)\r\n        res.on(&amp;#039;data&amp;#039;, (d) =&gt; {\r\n          if(res.statusCode == 200){\r\n            data += d\r\n          }else{\r\n            throw new Error(`Non-200 code: ${res.statusCode}`)\r\n          }\r\n        })\r\n        res.on(&amp;#039;end&amp;#039;, () =&gt; {\r\n          if(data){\r\n            resolve(data)\r\n          }else{\r\n            reject(`Non-200 code: ${res.statusCode}`)\r\n          }\r\n        })\r\n      })\r\n      request.end()\r\n      request.on(&amp;#039;error&amp;#039;, (err) =&gt; console.error(err))\r\n    })\r\n  }\r\n\r\n  async getUser(id){\r\n    if(!id) throw new Error(&quot;getUser requires a user id.&quot;)\r\n    let opts = {\r\n      &amp;#039;hostname&amp;#039;: &amp;#039;discordbots.org&amp;#039;,\r\n      &amp;#039;port&amp;#039;: 443,\r\n      &amp;#039;path&amp;#039;: `/api/users/${id}`,\r\n      &amp;#039;method&amp;#039;: &amp;#039;GET&amp;#039;,\r\n      &amp;#039;headers&amp;#039;: {\r\n        &amp;#039;Authorization&amp;#039;: this.token,\r\n      }\r\n    }\r\n    return await this.request(opts)\r\n  }\r\n\r\n  async getBot(id, votes = false){\r\n    if(!id) id = this.client.user.id\r\n    let path = `/api/bots/${id}`\r\n    if(votes){\r\n      path = `/api/bots/${id}/votes`\r\n    }\r\n    let opts = {\r\n      &amp;#039;hostname&amp;#039;: &amp;#039;discordbots.org&amp;#039;,\r\n      &amp;#039;port&amp;#039;: 443,\r\n      &amp;#039;path&amp;#039;: path,\r\n      &amp;#039;method&amp;#039;: &amp;#039;GET&amp;#039;,\r\n      &amp;#039;headers&amp;#039;: {\r\n        &amp;#039;Authorization&amp;#039;: this.token,\r\n      }\r\n    }\r\n    return await this.request(opts)\r\n  }\r\n  \r\n  async checkVote(id){\r\n    if(!id) throw new Error(&quot;checkVote requires a user id.&quot;)\r\n    let opts = {\r\n      &amp;#039;hostname&amp;#039;: &amp;#039;discordbots.org&amp;#039;,\r\n      &amp;#039;port&amp;#039;: 443,\r\n      &amp;#039;path&amp;#039;: `/api/bots/${this.client.user.id}/check?userId=${id}`,\r\n      &amp;#039;method&amp;#039;: &amp;#039;GET&amp;#039;,\r\n      &amp;#039;headers&amp;#039;: {\r\n        &amp;#039;Authorization&amp;#039;: this.token,\r\n      }\r\n    }\r\n    let req = await this.request(opts)\r\n    return req.voted\r\n  }\r\n  \r\n  async getStats(id){\r\n    if(!id) id = this.client.user.id\r\n    let opts = {\r\n      &amp;#039;hostname&amp;#039;: &amp;#039;discordbots.org&amp;#039;,\r\n      &amp;#039;port&amp;#039;: 443,\r\n      &amp;#039;path&amp;#039;: `/api/bots/${id}/stats`,\r\n      &amp;#039;method&amp;#039;: &amp;#039;GET&amp;#039;,\r\n      &amp;#039;headers&amp;#039;: {\r\n        &amp;#039;Authorization&amp;#039;: this.token,\r\n      }\r\n    }\r\n    return await this.request(opts)\r\n  }\r\n  \r\n  onVote(req, res){\r\n    if(req.headers.authorization !== this.auth){\r\n      res.status(401).send(&quot;Unauthorized&quot;)\r\n    }else{\r\n      res.status(200)\r\n      let vote = JSON.parse(req.body)\r\n      this.emit(&amp;#039;vote&amp;#039;, vote)\r\n    }\r\n  }\r\n  \r\n  getWidget(id, opts){\r\n    if(!id) id = this.client.user.id\r\n    opts = opts || {}\r\n    let {\r\n      topcolor,\r\n      middlecolor,\r\n      usernamecolor,\r\n      certifiedcolor,\r\n      datacolor,\r\n      labelcolor,\r\n      highlightcolor\r\n    } = opts\r\n    return `https://discordbots.org/api/widget/${id}.svg?${topcolor ? `topcolor=${topcolor}&amp;`:&amp;#039;&amp;#039;}${middlecolor ? `middlecolor=${middlecolor}&amp;`:&amp;#039;&amp;#039;}${usernamecolor ? `usernamecolor=${usernamecolor}&amp;`:&amp;#039;&amp;#039;}${certifiedcolor ? `certifiedcolor=${certifiedcolor}&amp;`:&amp;#039;&amp;#039;}${datacolor ? `datacolor=${datacolor}&amp;`:&amp;#039;&amp;#039;}${labelcolor ? `labelcolor=${labelcolor}&amp;`:&amp;#039;&amp;#039;}${highlightcolor ? `highlightcolor=${highlightcolor}&amp;`:&amp;#039;&amp;#039;}`.slice(0, -1)\r\n  }\r\n  \r\n  postStats(){\r\n    if(!this.client) throw new Error(&quot;No client provided in constructor.&quot;)\r\n    if(this.client.shard){\r\n      this.client.shard.broadcastEval(&amp;#039;this.guilds.size&amp;#039;).then(results =&gt; {\r\n        results.reduce((prev, val) =&gt; prev + val, 0)\r\n        let count = parseInt(results)\r\n        let postData = JSON.stringify({\r\n          server_count: count\r\n        })\r\n        let opts = {\r\n          &amp;#039;hostname&amp;#039;: &amp;#039;discordbots.org&amp;#039;,\r\n          &amp;#039;port&amp;#039;: 443,\r\n          &amp;#039;path&amp;#039;: `/api/bots/${this.client.user.id}/stats`,\r\n          &amp;#039;method&amp;#039;: &amp;#039;POST&amp;#039;,\r\n          &amp;#039;headers&amp;#039;: {\r\n            &amp;#039;Authorization&amp;#039;: this.token,\r\n            &amp;#039;Content-Type&amp;#039;: &amp;#039;application/json&amp;#039;\r\n          },\r\n        }\r\n        let post = https.request(opts, (res) =&gt; {\r\n          if(res.statusCode == 401) throw new Error(&quot;Unauthorized, invalid DBL token.&quot;)\r\n          res.on(&amp;#039;data&amp;#039;, (d) =&gt; {\r\n            console.info(`Post status code: ${res.statusCode}`)\r\n            if(res.statusCode == 200) console.info(`${count} servers posted successfully`)\r\n          })\r\n        })\r\n        post.write(postData)\r\n        post.end()\r\n        post.on(&amp;#039;error&amp;#039;, (err) =&gt; console.error(err))\r\n      })\r\n    }else {\r\n      let count = this.client.guilds.size\r\n      let postData = JSON.stringify({\r\n        server_count: count\r\n      })\r\n      let opts = {\r\n        &amp;#039;hostname&amp;#039;: &amp;#039;discordbots.org&amp;#039;,\r\n        &amp;#039;port&amp;#039;: 443,\r\n        &amp;#039;path&amp;#039;: `/api/bots/${this.client.user.id}/stats`,\r\n        &amp;#039;method&amp;#039;: &amp;#039;POST&amp;#039;,\r\n        &amp;#039;headers&amp;#039;: {\r\n          &amp;#039;Authorization&amp;#039;: this.token,\r\n          &amp;#039;Content-Type&amp;#039;: &amp;#039;application/json&amp;#039;\r\n        },\r\n      }\r\n      let post = https.request(opts, (res) =&gt; {\r\n        if(res.statusCode == 401) throw new Error(&quot;Unauthorized, invalid DBL token.&quot;)\r\n        res.on(&amp;#039;data&amp;#039;, (d) =&gt; {\r\n          console.info(`Post status code: ${res.statusCode}`)\r\n          if(res.statusCode == 200) console.info(`${count} servers posted successfully`)\r\n        })\r\n      })\r\n      post.write(postData)\r\n      post.end()\r\n      post.on(&amp;#039;error&amp;#039;, (err) =&gt; console.error(err))\r\n    }\r\n  }\r\n}\r\n\r\nfunction isLib(library, client){\r\n  try {\r\n    const lib = require.cache[require.resolve(library)]\r\n    return lib &amp;&amp; client instanceof lib.exports.Client\r\n  } catch (e) {\r\n    return false\r\n  }\r\n}\r\n\r\nmodule.exports = DblAPI</code></pre></p> <p align="right"><span style="font-size: 60%">Add a code snippet to your website: <a href="https://www.paste.org" target="_blank">www.paste.org</a></span></p> </body> </html>'