b' <!DOCTYPE html> <html lang="en"> <head> <meta charset="utf-8"> <meta http-equiv="X-UA-Compatible" content="IE=edge"> <meta name="viewport" content="width=device-width, initial-scale=1">  <meta name="description" content="www.paste.org - allows users to paste snippets of text, usually samples of source code, for public viewing."> <meta name="author" content="An Australian"> <link rel="icon" href="/favicon.ico"> <title>Paste code - paste.org</title>  <link href="/assets/themes/bleh/css/github-highlight.css" rel="stylesheet"> <script src="/assets/themes/bleh/js/highlight.pack.js"></script> <script>hljs.initHighlightingOnLoad();</script> </head> <body> <p><pre><code class="csharp">using System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.IO;\n\nusing Microsoft.Crm.Sdk;\nusing Microsoft.Crm.Sdk.Query;\nusing Microsoft.Crm.SdkTypeProxy;\nusing Microsoft.Crm.SdkTypeProxy.Metadata;\nusing Microsoft.Crm.Sdk.Metadata;\n\nnamespace RP_AccountUpdate\n{\n   public class RP_AccountUpdate : IPlugin\n   {\n      public struct Address\n      {\n         public string gatve;\n         public int namoNr;\n         public int miestas;\n      }\n\n      //konstantos, naudojamos nurodant koki entity norima &quot;pasiimti&quot; su getEntities()\n      public const int ACCOUNT = 0;\n      public const int SIBLINGS = 1;\n      public const int CHILDREN = 2;\n      public const int SAME_ADDRESSES = 3;\n      public const int ALL_ADDRESSES = 4;\n\n      //adreso atributai, pagal kuriuos ziurimas unikalumas\n      public string gatve = &quot;&quot;;\n      public int namoNr = -1;\n      public int miestas = -1;\n      public int addRem = 0; //add or remove? jei == 1, tai bus pridedami nutole taskai, jei == -1, tai bus atimami\n      //unikaliu adresu atributu sarasas\n      public List&lt;Address&gt; AddrList = new List&lt;Address&gt;();\n\n      public void Execute(IPluginExecutionContext context)\n      {\n         try\n         {\n            if (context.CallerOrigin.ToString() == &quot;Microsoft.Crm.Sdk.ApplicationOrigin&quot;)\n            {\n               ICrmService service = (ICrmService)context.CreateCrmService(true);\n\n               //pasiimam keiciamo account Guid ir seno tevo Guid\n               DynamicEntity preImage = (DynamicEntity)context.PreEntityImages.Properties[&quot;preImg&quot;];\n               Guid accountGuid = new Guid(((Key)preImage[&quot;accountid&quot;]).Value.ToString());\n               Guid oldParentGuid = Guid.Empty;\n               if (preImage.Properties.Contains(&quot;parentaccountid&quot;))\n                  oldParentGuid = ((Lookup)preImage[&quot;parentaccountid&quot;]).Value;\n\n               //pasiimam naujo tevo Guid\n               DynamicEntity entity = (DynamicEntity)context.InputParameters.Properties[ParameterName.Target];\n               Guid newParentGuid = Guid.Empty;\n               if (entity.Properties.Contains(&quot;parentaccountid&quot;))\n                  newParentGuid = ((Lookup)entity[&quot;parentaccountid&quot;]).Value;\n\n               //jeigui senas ir naujas Guid skiriasi, reikia kazka keisti..\n               if (oldParentGuid != newParentGuid)\n               {                \n                  //susirenkam ir i sarasa isirasom keiciamo account visu unikaliu adresu atributus\n                  RetrieveMultipleResponse addresses = getEntities(service, accountGuid, ALL_ADDRESSES);\n                  for (int i = 0; i &lt; addresses.BusinessEntityCollection.BusinessEntities.Count; i++)\n                  {\n                     DynamicEntity address = (DynamicEntity)addresses.BusinessEntityCollection.BusinessEntities[i];\n                     Address tempAdr = new Address();\n                     if (address.Properties.Contains(&quot;new_gatv&quot;))\n                        tempAdr.gatve = (String)address[&quot;new_gatv&quot;];\n                     else\n                        tempAdr.gatve = &quot;&quot;;\n                     if (address.Properties.Contains(&quot;new_namonr&quot;))\n                        tempAdr.namoNr = ((CrmNumber)address[&quot;new_namonr&quot;]).Value;\n                     else\n                        tempAdr.namoNr = 0;\n                     if (address.Properties.Contains(&quot;new_miestasrajonas&quot;))\n                        tempAdr.miestas = ((Picklist)address[&quot;new_miestasrajonas&quot;]).Value;\n                     else\n                        tempAdr.miestas = 0;\n                     //ziurime, ar toks adresas dar neirasytas i sarasa\n                     if (!AddrList.Contains(tempAdr))\n                        AddrList.Add(tempAdr);\n                  }\n                  //i sarasa prirasom vaiku adresus\n                  addChildrenAddresses(service, accountGuid);\n\n                  //jeigu pries tai buvo priskirtas tevas, tvarkomes su buvusiais giminaiciais..\n                  if (oldParentGuid != Guid.Empty)\n                  {\n                     this.addRem = -1;  //jei reikes, tai &quot;-1&quot; bus pridetas prie nutolusiu tasku skaiciaus\n                     for (int i = 0; i &lt; AddrList.Count; i++)\n                     {\n                        this.gatve = AddrList[i].gatve;\n                        this.namoNr = AddrList[i].namoNr;\n                        this.miestas = AddrList[i].miestas;\n                        dealWithRelatives(service, accountGuid, oldParentGuid);\n                     }\n                  }\n\n                  //jei priskiriamas naujas tevas, reik susitvarkyti su naujais giminaiciais..\n                  if (newParentGuid != Guid.Empty)\n                  {\n                     this.addRem = 1;  //jei reikes, tai &quot;1&quot; bus pridetas prie nutolusiu tasku skaiciaus\n                     for (int i = 0; i &lt; AddrList.Count; i++)\n                     {\n                        this.gatve = AddrList[i].gatve;\n                        this.namoNr = AddrList[i].namoNr;\n                        this.miestas = AddrList[i].miestas;\n                        dealWithRelatives(service, accountGuid, newParentGuid);\n                     }\n                  }\n               }\n            }\n         }\n         catch (Exception e)\n         {\n            using (TextWriter tw = TextWriter.Synchronized(File.AppendText(@&quot;C:\\\\CRM ErrorLog\\\\RP_AccountUpdate_ErrorLog.txt&quot;)))\n            {\n               tw.WriteLine(DateTime.Now.ToString() + tw.NewLine + e.ToString() + tw.NewLine);\n            }\n            throw e;\n         }\n      }\n\n      /// &lt;summary&gt;\n      /// perbegama per visus &quot;tevus&quot; ir &quot;brolius/seseris&quot;, jei reikia - keiciamas &quot;tevu&quot; nutolusiu tasku skaicius\n      /// &lt;/summary&gt;\n      /// &lt;param name=&quot;service&quot;&gt;&lt;/param&gt;\n      /// &lt;param name=&quot;childGuid&quot;&gt;keiciamo account Guid&lt;/param&gt;\n      /// &lt;param name=&quot;clientGuid&quot;&gt;tevo Guid, kurio nutolusiu tasku skaicius gali pakisti&lt;/param&gt;\n      void dealWithRelatives(ICrmService service, Guid childGuid, Guid clientGuid)\n      {\n         //paziurima ar account pats neturi sutampanciu adresu, jei taip - baigiam\n         RetrieveMultipleResponse addressResponse = getEntities(service, clientGuid, SAME_ADDRESSES);\n         if (addressResponse.BusinessEntityCollection.BusinessEntities.Count &gt; 0)\n            return;\n\n         //paziurima ar account kiti vaikai neturi sutampanciu adresu, jei turi - baigiam darba\n         RetrieveMultipleResponse siblingsResponse = getEntities(service, childGuid, SIBLINGS);\n         for (int i = 0; i &lt; siblingsResponse.BusinessEntityCollection.BusinessEntities.Count; i++)\n         {\n            DynamicEntity sibling = (DynamicEntity)siblingsResponse.BusinessEntityCollection.BusinessEntities[i];\n            Guid siblingGuid = new Guid(((Key)sibling[&quot;accountid&quot;]).Value.ToString());\n\n            RetrieveMultipleResponse siblAddressResponse = getEntities(service, siblingGuid, SAME_ADDRESSES);\n            if (siblAddressResponse.BusinessEntityCollection.BusinessEntities.Count &gt; 0)\n               return;\n            if (doesChildrenContain(service, siblingGuid))\n               return;\n         }\n\n         //niekas neturi sutampanciu adresu, tai keiciam nutolusiu tasku skaiciu\n         updateClient(service, clientGuid);\n         //jei yra tolimesnis tevas, kartojam is naujo\n         RetrieveMultipleResponse accountResponse = getEntities(service, clientGuid, ACCOUNT);\n         DynamicEntity account = (DynamicEntity)accountResponse.BusinessEntityCollection.BusinessEntities[0];\n         if (account.Properties.Contains(&quot;parentaccountid&quot;))\n         {\n            Guid parentGuid = ((Lookup)account[&quot;parentaccountid&quot;]).Value;\n            dealWithRelatives(service, clientGuid, parentGuid);\n         }\n      }\n\n      /// &lt;summary&gt;\n      /// keiciamas accounto (pagal Guid) nutolusiu tasku skaicius\n      /// &lt;/summary&gt;\n      /// &lt;param name=&quot;service&quot;&gt;&lt;/param&gt;\n      /// &lt;param name=&quot;guid&quot;&gt;&lt;/param&gt;\n      void updateClient(ICrmService service, Guid guid)\n      {\n         RetrieveMultipleResponse retrieved = getEntities(service, guid, ACCOUNT);\n         DynamicEntity entity = (DynamicEntity)retrieved.BusinessEntityCollection.BusinessEntities[0];\n         //suskaiciuojamas naujas nutolusiu tasku skaicius\n         int remotePoints = 0;\n         if (entity.Properties.Contains(&quot;new_nutolusitaksk&quot;))\n            remotePoints = ((CrmNumber)entity[&quot;new_nutolusitaksk&quot;]).Value;\n         remotePoints += this.addRem;\n         if (remotePoints &lt; 0)\n            remotePoints = 0;\n         //suformuojamas tinkamas formatas ir atnaujanimas irasas\n         CrmNumberProperty number = new CrmNumberProperty(&quot;new_nutolusitaksk&quot;, new CrmNumber(remotePoints));\n         entity.Properties.Add(number);\n         // Create the update target.   \n         TargetUpdateDynamic updateDynamic = new TargetUpdateDynamic();\n         // Set the properties of the target.   \n         updateDynamic.Entity = entity;\n         //   Create the update request object.    \n         UpdateRequest update = new UpdateRequest();\n         //   Set request properties.    \n         update.Target = updateDynamic;\n         //   Execute the request.    \n         UpdateResponse updated = (UpdateResponse)service.Execute(update);\n      }\n\n      /// &lt;summary&gt;\n      /// perbegama per visus nurodyto account vaikus ir patikrinima, ar jie neturi ieskamo adreso...\n      /// &lt;/summary&gt;\n      /// &lt;param name=&quot;service&quot;&gt;&lt;/param&gt;\n      /// &lt;param name=&quot;guid&quot;&gt;&lt;/param&gt;\n      /// &lt;returns&gt;&lt;/returns&gt;\n      bool doesChildrenContain(ICrmService service, Guid guid)\n      {\n         //pasiimami visi vaikai\n         RetrieveMultipleResponse children = getEntities(service, guid, CHILDREN);\n         for (int i = 0; i &lt; children.BusinessEntityCollection.BusinessEntities.Count; i++)\n         {\n            DynamicEntity child = (DynamicEntity)children.BusinessEntityCollection.BusinessEntities[i];\n            Guid childGuid = new Guid(((Key)child[&quot;accountid&quot;]).Value.ToString());\n\n            //jeigu sutampanciu adresu paieskoje grazinama nors vienas sutampantis adresas, true.. \n            RetrieveMultipleResponse childAddressResponse = getEntities(service, childGuid, SAME_ADDRESSES);\n            if (childAddressResponse.BusinessEntityCollection.BusinessEntities.Count &gt; 0)\n               return true;\n            //sis vaikas neturejo sutampanciu adresu, tai bandome ziurejo jo vaikus (lendam giliau).\n            else if (doesChildrenContain(service, childGuid))\n               return true;\n         }\n         //vaikai sutampanciu adresu neturi.\n         return false;\n      }\n\n      /// &lt;summary&gt;\n      /// unikalus adresu atributu sarasas papildomas nurodyto account vaiku adresu informacija\n      /// &lt;/summary&gt;\n      /// &lt;param name=&quot;service&quot;&gt;&lt;/param&gt;\n      /// &lt;param name=&quot;clientGuid&quot;&gt;&lt;/param&gt;\n      void addChildrenAddresses(ICrmService service, Guid clientGuid)\n      {\n         //pasiimam visus kliento sub-accountus (vaikus)\n         RetrieveMultipleResponse children = getEntities(service, clientGuid, CHILDREN);\n         for (int i = 0; i &lt; children.BusinessEntityCollection.BusinessEntities.Count; i++)\n         {\n            DynamicEntity child = (DynamicEntity)children.BusinessEntityCollection.BusinessEntities[i];\n            Guid guid = new Guid(((Key)child[&quot;accountid&quot;]).Value.ToString());\n            //pasiimam vaiko adresus, jei adresas unikalus - isimetam i sarasa\n            RetrieveMultipleResponse addresses = getEntities(service, guid, ALL_ADDRESSES);\n            for (int j = 0; j &lt; addresses.BusinessEntityCollection.BusinessEntities.Count; j++)\n            {\n               DynamicEntity address = (DynamicEntity)addresses.BusinessEntityCollection.BusinessEntities[j];\n               Address tempAdr = new Address();\n               if (address.Properties.Contains(&quot;new_gatv&quot;))\n                  tempAdr.gatve = (String)address[&quot;new_gatv&quot;];\n               else\n                  tempAdr.gatve = &quot;&quot;;\n               if (address.Properties.Contains(&quot;new_namonr&quot;))\n                  tempAdr.namoNr = ((CrmNumber)address[&quot;new_namonr&quot;]).Value;\n               else\n                  tempAdr.namoNr = 0;\n               if (address.Properties.Contains(&quot;new_miestasrajonas&quot;))\n                  tempAdr.miestas = ((Picklist)address[&quot;new_miestasrajonas&quot;]).Value;\n               else\n                  tempAdr.miestas = 0;\n\n               if (!AddrList.Contains(tempAdr))\n                  AddrList.Add(tempAdr);\n            }\n            //lendam pas vaiku vaikus..\n            addChildrenAddresses(service, guid);\n         }\n      }\n\n      /// &lt;summary&gt;\n      /// grazina ivairius DynamicEntities (RetrieveMultipleResponse, is kuriu galima pasiimti DynamicEntities)\n      /// &lt;/summary&gt;\n      /// &lt;param name=&quot;service&quot;&gt;&lt;/param&gt;\n      /// &lt;param name=&quot;guid&quot;&gt;&lt;/param&gt;\n      /// &lt;param name=&quot;type&quot;&gt;ACCOUNT = 0  grazinamas account,\n      ///                    SIBLINGS = 1 grazinami account broliai/seserys,\n      ///                    CHILDREN = 2 grazinami account vaikai,\n      ///                    SAME_ADDRESSES = 3 grazinami sutampantys adresai,\n      ///                    ALL_ADDRESSES = 4 grazinami visi adresai\n      ///                    &lt;/param&gt;\n      /// &lt;returns&gt;&lt;/returns&gt;\n      RetrieveMultipleResponse getEntities(ICrmService service, Guid guid, int type)\n      {\n         string entityName = &quot;&quot;;\n         string[] cols = null;\n         FilterExpression filter = new Filter[removed]);\n         filter.FilterOperator = LogicalOperator.And;\n         switch (type)\n         {\n            case ACCOUNT:\n               {\n                  ConditionExpression condition = new Condition[removed]);\n                  condition.AttributeName = &quot;accountid&quot;;\n                  condition.Operator = ConditionOperator.Equal;\n                  condition.Values = new Object[] { guid };\n                  filter.AddCondition(condition);\n\n                  entityName = &quot;account&quot;;\n                  cols = new string[] { &quot;parentaccountid&quot;, &quot;new_nutolusitaksk&quot;, &quot;accountid&quot; };\n                  break;\n               }\n            case SIBLINGS:\n               {\n                  RetrieveMultipleResponse accountResponse = getEntities(service, guid, ACCOUNT);\n                  DynamicEntity account = (DynamicEntity)accountResponse.BusinessEntityCollection.BusinessEntities[0];\n                  Guid parentGuid = ((Lookup)account[&quot;parentaccountid&quot;]).Value;\n\n                  ConditionExpression condition = new Condition[removed]);\n                  condition.AttributeName = &quot;parentaccountid&quot;;\n                  condition.Operator = ConditionOperator.Equal;\n                  condition.Values = new Object[] { parentGuid };\n                  filter.AddCondition(condition);\n\n                  ConditionExpression condition2 = new Condition[removed]);\n                  condition2.AttributeName = &quot;accountid&quot;;\n                  condition2.Operator = ConditionOperator.NotEqual;\n                  condition2.Values = new Object[] { guid };\n                  filter.AddCondition(condition2);\n\n                  entityName = &quot;account&quot;;\n                  cols = new string[] { &quot;parentaccountid&quot;, &quot;new_nutolusitaksk&quot;, &quot;accountid&quot; };\n                  break;\n               }\n            case CHILDREN:\n               {\n                  ConditionExpression condition = new Condition[removed]);\n                  condition.AttributeName = &quot;parentaccountid&quot;;\n                  condition.Operator = ConditionOperator.Equal;\n                  condition.Values = new Object[] { guid };\n                  filter.AddCondition(condition);\n\n                  entityName = &quot;account&quot;;\n                  cols = new string[] { &quot;parentaccountid&quot;, &quot;new_nutolusitaksk&quot;, &quot;accountid&quot; };\n                  break;\n               }\n            case SAME_ADDRESSES:\n               {\n                  ConditionExpression condition = new Condition[removed]);\n                  condition.AttributeName = &quot;new_klientasid&quot;;\n                  condition.Operator = ConditionOperator.Equal;\n                  condition.Values = new Object[] { guid };\n                  filter.AddCondition(condition);\n\n                  ConditionExpression condition2 = new Condition[removed]);\n                  condition2.AttributeName = &quot;new_gatv&quot;;\n                  condition2.Operator = ConditionOperator.Equal;\n                  condition2.Values = new Object[] { this.gatve };\n                  filter.AddCondition(condition2);\n\n                  ConditionExpression condition3 = new Condition[removed]);\n                  condition3.AttributeName = &quot;new_namonr&quot;;\n                  condition3.Operator = ConditionOperator.Equal;\n                  condition3.Values = new Object[] { this.namoNr };\n                  filter.AddCondition(condition3);\n\n                  ConditionExpression condition4 = new Condition[removed]);\n                  condition4.AttributeName = &quot;new_miestasrajonas&quot;;\n                  condition4.Operator = ConditionOperator.Equal;\n                  condition4.Values = new Object[] { this.miestas };\n                  filter.AddCondition(condition4);\n\n                  entityName = &quot;new_adresai&quot;;\n                  cols = new string[] { &quot;new_adresaiid&quot; };\n                  break;\n               }\n            case ALL_ADDRESSES:\n               {\n                  ConditionExpression condition = new Condition[removed]);\n                  condition.AttributeName = &quot;new_klientasid&quot;;\n                  condition.Operator = ConditionOperator.Equal;\n                  condition.Values = new Object[] { guid };\n                  filter.AddCondition(condition);\n                  entityName = &quot;new_adresai&quot;;\n                  cols = new string[] { &quot;new_adresaiid&quot;, &quot;new_gatv&quot;, &quot;new_namonr&quot;, &quot;new_miestasrajonas&quot; };\n                  break;\n               }\n         }\n         QueryExpression query = new Query[removed]);\n         query.EntityName = entityName;\n         query.ColumnSet = new ColumnSet(cols);\n         query.Criteria = filter;\n         //Vykdoma uzklausa\n         RetrieveMultipleRequest retrieve = new RetrieveMultipleRequest();\n         retrieve.Query = query;\n         retrieve.ReturnDynamicEntities = true;\n         RetrieveMultipleResponse retrieved = (RetrieveMultipleResponse)service.Execute(retrieve);\n         return retrieved;\n      }\n   }\n}</code></pre></p> <p align="right"><span style="font-size: 60%">Add a code snippet to your website: <a href="https://www.paste.org" target="_blank">www.paste.org</a></span></p> </body> </html>'