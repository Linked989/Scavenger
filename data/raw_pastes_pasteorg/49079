b' <!DOCTYPE html> <html lang="en"> <head> <meta charset="utf-8"> <meta http-equiv="X-UA-Compatible" content="IE=edge"> <meta name="viewport" content="width=device-width, initial-scale=1">  <meta name="description" content="www.paste.org - allows users to paste snippets of text, usually samples of source code, for public viewing."> <meta name="author" content="An Australian"> <link rel="icon" href="/favicon.ico"> <title>Paste code - paste.org</title>  <link href="/assets/themes/bleh/css/github-highlight.css" rel="stylesheet"> <script src="/assets/themes/bleh/js/highlight.pack.js"></script> <script>hljs.initHighlightingOnLoad();</script> </head> <body> <p><pre><code class="asm">// Loesung Aufgabe 3 und 4 von Termin4 Rechnerarchitektur WS2011\n// Name: Julian S Matrikelnummer:\n// Name: Jonas Ross Matrikelnummer:\n// Datum:\n .file &quot;aufgabe3.S&quot;\n .text   @ legt eine Textsection fuer ProgrammCode + Konstanten an\n .align 2  @ sorgt dafuer, dass nachfolgende Anweisungen auf einer durch 4 teilbaren Adresse liegen \n   @ unteren 2 Bit sind 0\n .global main  @ nimmt das Symbol main in die globale Sysmboltabelle auf\n .type main,function\nmain:\n stmfd sp!, {r4, r5, lr} @ Ruecksprungadresse und Register sichern\nkopieren:\n@ hier Ihr Programm zum Kopieren einer Byte-Tabelle (je 8Bit) in eine Word-Tabelle (je 32Bit) einfuegen0\n   ldr r1,=Liste1     //r1 zeigt auf die adresse der Marke liste1\n  ldrb r11,[r1]     //Anzahl der Elemente der Liste\n  ldr r2,=TAB2\n  ldr r2,[r2]     //r2 zeigt auf die adresse der Marke TAB2\n // ldr r2,[pc, #148] \n  mov r4,r11     //copy counter (anzahl der noch zu kopierenden elemente der liste)\ncopy:  ldrb r0,[r1],#1     //r0 = memory inhalt von r1, autoinkrement von r1 um 1 (byte liste)\n  str r0,[r2],#4     //speichern des wertes in liste 2, autoinkremen von r2 um 4 (word liste)\n  sub r4,r4,#1     //dekrementieren des schleifenzaehlers\n  cmp r4,#0     //vergleich schleifenzaehler mit 0\n  bne copy     //solange wiederholen bis Schleifenzaehler = 0\n  \n\nvorzeichen:\n@ hier Ihr Programm um die 8Bit-Zahlen auf vorzeichenrichtige 32Bit-Zahlen zu wandeln\n  ldr r2,=TAB2\n  ldr r2,[r2]     //r2 zeigt wieder auf tabelle2\n  mov r4,r11     //shift counter\nshift:  ldr r5,[r2]     //laedt memory inhalt auf den r2 zeigt nach r5(tmp), und erhoeht dann r2 um 4\n  mov r5,r5,lsl#24  \n  mov r5,r5,asr#24    //shiftet arithmetisch (signed) die zahl um 3 byte nach rechts\n  str r5,[r2],#4     //die nun geaenderte zahl wieder im memory abspeichern\n  sub r4,r4,#1     //shift counter --\n  cmp r4,#0     // vergleich shift counter mit 0\n  bne shift     // wenn ungleich 0 wiederholen\nsortieren:\n@ hier Ihr Programm um die vorzeichenrichtige Zahlen in Liste2 zu sortieren\n  sub r6,r11,#1     //schleifenzaehler aeussere schleife\n  mov r8,#0      // Tauschboolean\n  mov r9,#0      //startpunkt der schleife\n  \nlout: sub r5,r11,#1     //schleifenzaehler innere Schleife\n\n  sub r5,r5,r9,lsr#2    // tauschbereich verkleinert\n  sub r5,r5,#1     // nochmaliges dekrement damit der bereich die korrekte groesse hat\n  \n  sub r6,r6,#1     //aeusserer zaehler--\n  ldr r2,=TAB2\n  ldr r2,[r2]\n  cmp r8,#0     //im falle r8=0 wurde nicht getauscht\n  \n  bne Ta      //wenn getauscht wurde,also (r8=-1) keine grenzverschiebung\n   add r9,r9,#4    //beim ersten mal automatisch auf 2. stelle der tabelle\n  \nTa:  add r2,r2,r9    //zeiger auf die vergleichszahl in tabelle 2\n  mov r1,r2     //zeiger auf die aktuelle Zahl in tabelle 2\n  mov r8,#0     //tauschzaehler\nlin: add r2,r2,#4    //vergleichs zeiger einen wert weiter\n  ldr r0,[r1]     \n  ldr r4,[r2]\n  cmp r0,r4     //Vergleich alias r1 mit alias r2\n  blt noswap     //wenn [r1] kleiner als [r2] dann kein tausch\n  ldr r3,[r2]     //tmp variable r3\n  ldr r0,[r1]     //tmp r0 erhaelt wert&amp; von r1\n  str r0,[r2]     // [r2]=[r1]\n  str r3,[r1]     // [r1]=r3\n  add r1,r1,#4    //wenn getauscht wird dann wandert die vergleichszahl eins weiter\n  mov r8,#1     //Tauschzaehler 1\nnoswap:  sub r5,r5,#1   //innerer zaehler --\n  cmp r5,#0     //bedingung sprung innere schleife\n  bne lin      //innerer schleifenzaehler != 0\n  add r7,r7,#1    //erhoehung des zaehlcounters r7\n  cmp r6,#0     //bedingung sprung aeussere schleife\n  bne lout     //aeusserer schleifenzaehler != 0\nfertig:\n ldmfd sp!, {r4, r5, pc} @ Ruecksprungadresse und Register\n\nTAB2: .word Liste2 @ Beispiel um an Adressen aus anderen Segmenten zu kommen\n\n.Lfe1:\n .size main,.Lfe1-main\n\n// .data-Section fuer initialisierte Daten\n .data\n// Erster Wert der Tabelle steht fuer die Anzahl (max. 64) der Werte der Tabelle\nListe1: .byte (Liste1Ende-Liste1), -9, 8, -7, 6, -5, 4, -3, 2, -1, 0, 124, 126\nListe1Ende:\n\n\n// .comm-Section fuer nicht initialisierte Daten\n .comm Liste2, ((Liste1Ende-Liste1)*4)  @ Speicherbereich mit der Groesse*4 von Liste1 reservieren\n\n// End of File\n\n</code></pre></p> <p align="right"><span style="font-size: 60%">Add a code snippet to your website: <a href="https://www.paste.org" target="_blank">www.paste.org</a></span></p> </body> </html>'