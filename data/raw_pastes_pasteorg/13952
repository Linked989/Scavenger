b' <!DOCTYPE html> <html lang="en"> <head> <meta charset="utf-8"> <meta http-equiv="X-UA-Compatible" content="IE=edge"> <meta name="viewport" content="width=device-width, initial-scale=1">  <meta name="description" content="www.paste.org - allows users to paste snippets of text, usually samples of source code, for public viewing."> <meta name="author" content="An Australian"> <link rel="icon" href="/favicon.ico"> <title>Paste code - paste.org</title>  <link href="/assets/themes/bleh/css/github-highlight.css" rel="stylesheet"> <script src="/assets/themes/bleh/js/highlight.pack.js"></script> <script>hljs.initHighlightingOnLoad();</script> </head> <body> <p><pre><code class="java">/**\n * \n */\npackage engine;\n\nimport java.util.Hashtable;\nimport java.util.Vector;\n\nimport com.sun.org.apache.xml.internal.security.keys.content.KeyValue;\n\n/**\n * @author Pawe\xe2\x94\x82 Were\xcb\x9dski\n *\n */\n\npublic class PerformanceCounter&lt;KeyType&gt;\n{\n protected Hashtable&lt;KeyType, Stat&gt; times;\n public String name;\n long measures = 0;\n \n static private Vector&lt;PerformanceCounter&lt;Object&gt;&gt; all = new Vector&lt;PerformanceCounter&lt;Object&gt;&gt;(10);\n \n \n @SuppressWarnings(&quot;unchecked&quot;)\n public PerformanceCounter()\n {\n  times = new Hashtable&lt;KeyType, Stat&gt;(10);\n  all.add((PerformanceCounter&lt;Object&gt;)this);\n }\n \n public PerformanceCounter(String name)\n {\n  this();\n  this.name = name;\n }\n \n public void Destroy()\n {\n  all.remove(this);\n }\n \n public void start(KeyType timer)\n {\n  Stat S = times.get(timer);\n  if (S == null) times.put(timer, S = new Stat());\n  S.start();\n  measures++;\n }\n \n public void start(KeyType timer, Object caseObject)\n {\n  Stat S = times.get(timer);\n  if (S == null) times.put(timer, S = new Stat());\n  S.start(caseObject);\n  measures++;\n }\n \n public void stop(KeyType timer)\n {\n  Stat S = times.get(timer);\n  if (S == null) throw new RuntimeException(&quot;PerformanceCounter.stop(): Timer not found (&quot;+timer.toString()+&quot;)&quot;);\n  S.stop();\n }\n \n public void pause(KeyType timer)\n {\n  Stat S = times.get(timer);\n  if (S == null) throw new RuntimeException(&quot;PerformanceCounter.pause(): Timer not found (&quot;+timer.toString()+&quot;)&quot;);\n  S.pause();\n }\n \n public void startLoop(KeyType timer)\n {\n  Stat S = times.get(timer);\n  if (S == null) times.put(timer, S = new Stat());\n  S.startLoop();\n }\n \n public long getTime(KeyType timer)\n {\n  Stat S = times.get(timer);\n  if (S == null) throw new RuntimeException(&quot;PerformanceCounter.getTime(): Timer not found (&quot;+timer.toString()+&quot;)&quot;);\n  return S.getTime();\n }\n \n public void print(long totalTime)\n {\n  boolean no_total = totalTime == 0;\n  int longestName = 0, inner = 0;\n  for (KeyType timer: times.keySet()) \n  {\n   Stat stat = times.get(timer);\n   longestName = Math.max(longestName, timer.toString().length());\n   if (no_total) totalTime += stat.getTime();\n   if (stat.inner_loops &gt; 0) inner = Math.max(inner, (&quot;+&quot;+stat.inner_loops).length());\n  } \n  longestName += 2;\n  long total_time = 0, total_tpl = 0, total_min = 0, total_max = 0;\n  System.out.println(&quot;Performance results&quot; + (name != null ? (&quot; (&quot;+name+&quot;):&quot;) : &quot;:&quot;));\n  for (KeyType timer: times.keySet())\n  {\n   Stat stat = times.get(timer);\n   float tpl = stat.getPreciseAverageTime(), lps = 1000f / tpl;\n   printStat(timer, totalTime, stat.getTime(), stat.getMinTime(), stat.getMaxTime(), stat.loops, stat.inner_loops, tpl, lps, stat.getMinObject(), stat.getMaxObject(), longestName, inner);\n   total_time += stat.getTime(); total_min += stat.getMinTime(); total_max += stat.getMaxTime();\n   total_tpl += tpl;\n  }\n  printStat(null, totalTime, total_time, total_min, total_max, measures, 0, total_tpl, 1000f / total_tpl, null, null, longestName, inner);\n }\n \n static public void printAll(long totalTime)\n {\n  for (PerformanceCounter&lt;Object&gt; counter: all) counter.print(totalTime);\n }\n \n protected void printStat(KeyType timer, long totalTime, long statTime, long statMinTime, long statMaxTime, long statLoops, long statInnerLoops, float tpl, float lps, Object minObj, Object maxObj, int longestName, int longestInner)\n {\n  Stat stat = (timer != null) ? times.get(timer) : null;\n  System.out.println(&quot; - &quot; + fixedLength((timer != null) ? timer.toString()+&quot;:&quot; : &quot;total:&quot;, longestName, true) \n    + fixedLength(statTime + &quot; ms&quot;, 10, false)\n    + fixedLength(statMinTime + &quot; - &quot;, 10, false) + fixedLength(statMaxTime + &quot; ms&quot;, 10, true)\n    + fixedLength(totalTime &gt; 0 ? (Math.round(1000f*statTime/totalTime)/10f+&quot;%&quot;) : &quot;&quot;, 10, false)\n    + fixedLength(String.valueOf(statLoops), 10, false) + (stat != null ? (&quot; loops &quot; + fixedLength(stat.inner_loops &gt; 0 ? (&quot; (+&quot;+stat.inner_loops+&quot;)&quot;) : &quot;&quot;, longestInner+4, true)) : (&quot; measures &quot; + fixedLength(&quot;&quot;, longestInner+1, true)))\n    + fixedLength(String.valueOf((int)Math.round(tpl)), 10, false) + &quot; ms/loop &quot;\n    + fixedLength(String.valueOf(Math.round(10f * lps)/10f), 12, false) + &quot; loops/sec&quot;\n    + (minObj != null ? &quot;   min: &quot; + minObj : &quot;&quot;)\n    + (maxObj != null ? (minObj != null ? &quot;, &quot; : &quot;   &quot;) + &quot;max: &quot; + maxObj : &quot;&quot;)\n    + (stat != null &amp;&amp; stat.started &gt; 0 ? &quot;   (running)&quot; : (stat != null &amp;&amp; stat.paused ? &quot;   (paused)&quot; : &quot;&quot;)));\n  if (timer == null) System.out.println();\n }\n \n protected static String fixedLength(String str, int length, boolean alignLeft)\n {\n  String spaces = &quot;&quot;;\n  for (int i=length-str.length(); i&gt;0; i--) spaces += &quot; &quot;;\n  if (alignLeft) return str+spaces; else return spaces+str;\n }\n \n \n protected class Stat\n {\n  private long time = 0, timeBeforePause = 0;\n  private long startTime;\n  private long minTime = Long.MAX_VALUE, maxTime = 0;\n  private long loops = 0, inner_loops = 0;\n  private int started = 0;\n  private boolean paused = false;\n  private Object minTimeObj = null, maxTimeObj = null, curObj = null;\n  \n  public synchronized void start()\n  {\n   started++;\n   if (started == 1) \n   {\n    startTime = System.currentTimeMillis();\n    if (!paused) loops++; else paused = false; \n   }\n   else inner_loops++;\n  }\n  \n  public synchronized void start(Object obj)\n  {\n   start();\n   if (started == 1) curObj = obj;\n  }\n  \n  public synchronized void pause()\n  {\n   if (started &lt; 1) throw new RuntimeException(&quot;PerformanceCounter.pause(): Timer not started!&quot;);\n   started--;\n   if (started == 0)\n   {\n    final long current = System.currentTimeMillis() - startTime;\n    time += current;\n    timeBeforePause += current;\n    paused = true;\n   }\n  }\n  \n  public synchronized void stop()\n  {\n   boolean was_running = !paused;\n   if (started &lt; 1) \n    if (!paused) throw new RuntimeException(&quot;PerformanceCounter.stop(): Timer not started!&quot;);\n    else paused = false;\n   else started--;\n   if (started != 0) return;\n   if (was_running)\n   {\n    final long current = System.currentTimeMillis() - startTime;\n    time += current;\n    timeBeforePause += current;\n   }\n   if (timeBeforePause &lt; minTime) { minTime = timeBeforePause; if (curObj != null) minTimeObj = curObj; }\n   if (timeBeforePause &gt; maxTime) { maxTime = timeBeforePause; if (curObj != null) maxTimeObj = curObj; }\n   timeBeforePause = 0;\n  }\n  \n  public synchronized void startLoop()\n  {\n   if (started == 0) { loops++; paused = true; timeBeforePause = 0; } else inner_loops++;\n  }\n  \n  public long getTime()\n  {\n   return time + (started &gt; 0 ? System.currentTimeMillis() - startTime : 0);\n  }\n  \n  public long getMinTime()\n  {\n   if (started == 0) return minTime != Long.MAX_VALUE ? minTime : 0;\n   return Math.min(minTime, System.currentTimeMillis() - startTime);\n  }\n  \n  public long getMaxTime()\n  {\n   if (started == 0) return maxTime;\n   return Math.max(maxTime, System.currentTimeMillis() - startTime);\n  }\n  \n  public long getAverageTime()\n  {\n   return getTime() / loops;\n  }\n  \n  public float getPreciseAverageTime()\n  {\n   return (float)getTime() / (float)loops;\n  }\n  \n  public long getLoops()\n  {\n   return loops;\n  }\n  \n  public Object getMinObject()\n  {\n   return minTimeObj;\n  }\n  \n  public Object getMaxObject()\n  {\n   return maxTimeObj;\n  }\n }\n}</code></pre></p> <p align="right"><span style="font-size: 60%">Add a code snippet to your website: <a href="https://www.paste.org" target="_blank">www.paste.org</a></span></p> </body> </html>'